// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/RYO/api/ent/schema"
	"github.com/dopedao/RYO/api/ent/turn"
)

// Turn is the model entity for the Turn schema.
type Turn struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// LocationID holds the value of the "location_id" field.
	LocationID string `json:"location_id,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID string `json:"item_id,omitempty"`
	// BuyOrSell holds the value of the "buy_or_sell" field.
	BuyOrSell bool `json:"buy_or_sell,omitempty"`
	// AmountToGive holds the value of the "amount_to_give" field.
	AmountToGive schema.BigInt `json:"amount_to_give,omitempty"`
	// UserCombatStats holds the value of the "user_combat_stats" field.
	UserCombatStats []int `json:"user_combat_stats,omitempty"`
	// DrugLordCombatStats holds the value of the "drug_lord_combat_stats" field.
	DrugLordCombatStats []int `json:"drug_lord_combat_stats,omitempty"`
	// TradeOccurs holds the value of the "trade_occurs" field.
	TradeOccurs bool `json:"trade_occurs,omitempty"`
	// UserPreTradeItem holds the value of the "user_pre_trade_item" field.
	UserPreTradeItem schema.BigInt `json:"user_pre_trade_item,omitempty"`
	// UserPostTradePreEventItem holds the value of the "user_post_trade_pre_event_item" field.
	UserPostTradePreEventItem schema.BigInt `json:"user_post_trade_pre_event_item,omitempty"`
	// UserPostTradePostEventItem holds the value of the "user_post_trade_post_event_item" field.
	UserPostTradePostEventItem schema.BigInt `json:"user_post_trade_post_event_item,omitempty"`
	// UserPreTradeMoney holds the value of the "user_pre_trade_money" field.
	UserPreTradeMoney schema.BigInt `json:"user_pre_trade_money,omitempty"`
	// UserPostTradePreEventMoney holds the value of the "user_post_trade_pre_event_money" field.
	UserPostTradePreEventMoney schema.BigInt `json:"user_post_trade_pre_event_money,omitempty"`
	// UserPostTradePostEventMoney holds the value of the "user_post_trade_post_event_money" field.
	UserPostTradePostEventMoney schema.BigInt `json:"user_post_trade_post_event_money,omitempty"`
	// MarketPreTradeItem holds the value of the "market_pre_trade_item" field.
	MarketPreTradeItem schema.BigInt `json:"market_pre_trade_item,omitempty"`
	// MarketPostTradePreEventItem holds the value of the "market_post_trade_pre_event_item" field.
	MarketPostTradePreEventItem schema.BigInt `json:"market_post_trade_pre_event_item,omitempty"`
	// MarketPostTradePostEventItem holds the value of the "market_post_trade_post_event_item" field.
	MarketPostTradePostEventItem schema.BigInt `json:"market_post_trade_post_event_item,omitempty"`
	// MarketPreTradeMoney holds the value of the "market_pre_tradeMoney" field.
	MarketPreTradeMoney schema.BigInt `json:"market_pre_tradeMoney,omitempty"`
	// MarketPostTradePreEventMoney holds the value of the "market_post_trade_pre_eventMoney" field.
	MarketPostTradePreEventMoney schema.BigInt `json:"market_post_trade_pre_eventMoney,omitempty"`
	// MarketPostTradePostEventMoney holds the value of the "market_post_trade_post_eventMoney" field.
	MarketPostTradePostEventMoney schema.BigInt `json:"market_post_trade_post_eventMoney,omitempty"`
	// DealerDash holds the value of the "dealer_dash" field.
	DealerDash bool `json:"dealer_dash,omitempty"`
	// WrangleDashedDealer holds the value of the "wrangle_dashed_dealer" field.
	WrangleDashedDealer bool `json:"wrangle_dashed_dealer,omitempty"`
	// Mugging holds the value of the "mugging" field.
	Mugging bool `json:"mugging,omitempty"`
	// RunFromMugging holds the value of the "run_from_mugging" field.
	RunFromMugging bool `json:"run_from_mugging,omitempty"`
	// GangWar holds the value of the "gang_war" field.
	GangWar bool `json:"gang_war,omitempty"`
	// DefendGangWar holds the value of the "defend_gang_war" field.
	DefendGangWar bool `json:"defend_gang_war,omitempty"`
	// CopRaid holds the value of the "cop_raid" field.
	CopRaid bool `json:"cop_raid,omitempty"`
	// BribeCops holds the value of the "bribe_cops" field.
	BribeCops bool `json:"bribe_cops,omitempty"`
	// FindItem holds the value of the "find_item" field.
	FindItem bool `json:"find_item,omitempty"`
	// LocalShipment holds the value of the "local_shipment" field.
	LocalShipment bool `json:"local_shipment,omitempty"`
	// WarehouseSeizure holds the value of the "warehouse_seizure" field.
	WarehouseSeizure bool `json:"warehouse_seizure,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Turn) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case turn.FieldUserCombatStats, turn.FieldDrugLordCombatStats:
			values[i] = new([]byte)
		case turn.FieldAmountToGive, turn.FieldUserPreTradeItem, turn.FieldUserPostTradePreEventItem, turn.FieldUserPostTradePostEventItem, turn.FieldUserPreTradeMoney, turn.FieldUserPostTradePreEventMoney, turn.FieldUserPostTradePostEventMoney, turn.FieldMarketPreTradeItem, turn.FieldMarketPostTradePreEventItem, turn.FieldMarketPostTradePostEventItem, turn.FieldMarketPreTradeMoney, turn.FieldMarketPostTradePreEventMoney, turn.FieldMarketPostTradePostEventMoney:
			values[i] = new(schema.BigInt)
		case turn.FieldBuyOrSell, turn.FieldTradeOccurs, turn.FieldDealerDash, turn.FieldWrangleDashedDealer, turn.FieldMugging, turn.FieldRunFromMugging, turn.FieldGangWar, turn.FieldDefendGangWar, turn.FieldCopRaid, turn.FieldBribeCops, turn.FieldFindItem, turn.FieldLocalShipment, turn.FieldWarehouseSeizure:
			values[i] = new(sql.NullBool)
		case turn.FieldID:
			values[i] = new(sql.NullInt64)
		case turn.FieldUserID, turn.FieldLocationID, turn.FieldItemID:
			values[i] = new(sql.NullString)
		case turn.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Turn", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Turn fields.
func (t *Turn) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case turn.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case turn.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				t.UserID = value.String
			}
		case turn.FieldLocationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value.Valid {
				t.LocationID = value.String
			}
		case turn.FieldItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				t.ItemID = value.String
			}
		case turn.FieldBuyOrSell:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field buy_or_sell", values[i])
			} else if value.Valid {
				t.BuyOrSell = value.Bool
			}
		case turn.FieldAmountToGive:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount_to_give", values[i])
			} else if value != nil {
				t.AmountToGive = *value
			}
		case turn.FieldUserCombatStats:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field user_combat_stats", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.UserCombatStats); err != nil {
					return fmt.Errorf("unmarshal field user_combat_stats: %w", err)
				}
			}
		case turn.FieldDrugLordCombatStats:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field drug_lord_combat_stats", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.DrugLordCombatStats); err != nil {
					return fmt.Errorf("unmarshal field drug_lord_combat_stats: %w", err)
				}
			}
		case turn.FieldTradeOccurs:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field trade_occurs", values[i])
			} else if value.Valid {
				t.TradeOccurs = value.Bool
			}
		case turn.FieldUserPreTradeItem:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field user_pre_trade_item", values[i])
			} else if value != nil {
				t.UserPreTradeItem = *value
			}
		case turn.FieldUserPostTradePreEventItem:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field user_post_trade_pre_event_item", values[i])
			} else if value != nil {
				t.UserPostTradePreEventItem = *value
			}
		case turn.FieldUserPostTradePostEventItem:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field user_post_trade_post_event_item", values[i])
			} else if value != nil {
				t.UserPostTradePostEventItem = *value
			}
		case turn.FieldUserPreTradeMoney:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field user_pre_trade_money", values[i])
			} else if value != nil {
				t.UserPreTradeMoney = *value
			}
		case turn.FieldUserPostTradePreEventMoney:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field user_post_trade_pre_event_money", values[i])
			} else if value != nil {
				t.UserPostTradePreEventMoney = *value
			}
		case turn.FieldUserPostTradePostEventMoney:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field user_post_trade_post_event_money", values[i])
			} else if value != nil {
				t.UserPostTradePostEventMoney = *value
			}
		case turn.FieldMarketPreTradeItem:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field market_pre_trade_item", values[i])
			} else if value != nil {
				t.MarketPreTradeItem = *value
			}
		case turn.FieldMarketPostTradePreEventItem:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field market_post_trade_pre_event_item", values[i])
			} else if value != nil {
				t.MarketPostTradePreEventItem = *value
			}
		case turn.FieldMarketPostTradePostEventItem:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field market_post_trade_post_event_item", values[i])
			} else if value != nil {
				t.MarketPostTradePostEventItem = *value
			}
		case turn.FieldMarketPreTradeMoney:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field market_pre_tradeMoney", values[i])
			} else if value != nil {
				t.MarketPreTradeMoney = *value
			}
		case turn.FieldMarketPostTradePreEventMoney:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field market_post_trade_pre_eventMoney", values[i])
			} else if value != nil {
				t.MarketPostTradePreEventMoney = *value
			}
		case turn.FieldMarketPostTradePostEventMoney:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field market_post_trade_post_eventMoney", values[i])
			} else if value != nil {
				t.MarketPostTradePostEventMoney = *value
			}
		case turn.FieldDealerDash:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field dealer_dash", values[i])
			} else if value.Valid {
				t.DealerDash = value.Bool
			}
		case turn.FieldWrangleDashedDealer:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field wrangle_dashed_dealer", values[i])
			} else if value.Valid {
				t.WrangleDashedDealer = value.Bool
			}
		case turn.FieldMugging:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mugging", values[i])
			} else if value.Valid {
				t.Mugging = value.Bool
			}
		case turn.FieldRunFromMugging:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field run_from_mugging", values[i])
			} else if value.Valid {
				t.RunFromMugging = value.Bool
			}
		case turn.FieldGangWar:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field gang_war", values[i])
			} else if value.Valid {
				t.GangWar = value.Bool
			}
		case turn.FieldDefendGangWar:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field defend_gang_war", values[i])
			} else if value.Valid {
				t.DefendGangWar = value.Bool
			}
		case turn.FieldCopRaid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field cop_raid", values[i])
			} else if value.Valid {
				t.CopRaid = value.Bool
			}
		case turn.FieldBribeCops:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bribe_cops", values[i])
			} else if value.Valid {
				t.BribeCops = value.Bool
			}
		case turn.FieldFindItem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field find_item", values[i])
			} else if value.Valid {
				t.FindItem = value.Bool
			}
		case turn.FieldLocalShipment:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_shipment", values[i])
			} else if value.Valid {
				t.LocalShipment = value.Bool
			}
		case turn.FieldWarehouseSeizure:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field warehouse_seizure", values[i])
			} else if value.Valid {
				t.WarehouseSeizure = value.Bool
			}
		case turn.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Turn.
// Note that you need to call Turn.Unwrap() before calling this method if this Turn
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Turn) Update() *TurnUpdateOne {
	return (&TurnClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Turn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Turn) Unwrap() *Turn {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Turn is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Turn) String() string {
	var builder strings.Builder
	builder.WriteString("Turn(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(t.UserID)
	builder.WriteString(", location_id=")
	builder.WriteString(t.LocationID)
	builder.WriteString(", item_id=")
	builder.WriteString(t.ItemID)
	builder.WriteString(", buy_or_sell=")
	builder.WriteString(fmt.Sprintf("%v", t.BuyOrSell))
	builder.WriteString(", amount_to_give=")
	builder.WriteString(fmt.Sprintf("%v", t.AmountToGive))
	builder.WriteString(", user_combat_stats=")
	builder.WriteString(fmt.Sprintf("%v", t.UserCombatStats))
	builder.WriteString(", drug_lord_combat_stats=")
	builder.WriteString(fmt.Sprintf("%v", t.DrugLordCombatStats))
	builder.WriteString(", trade_occurs=")
	builder.WriteString(fmt.Sprintf("%v", t.TradeOccurs))
	builder.WriteString(", user_pre_trade_item=")
	builder.WriteString(fmt.Sprintf("%v", t.UserPreTradeItem))
	builder.WriteString(", user_post_trade_pre_event_item=")
	builder.WriteString(fmt.Sprintf("%v", t.UserPostTradePreEventItem))
	builder.WriteString(", user_post_trade_post_event_item=")
	builder.WriteString(fmt.Sprintf("%v", t.UserPostTradePostEventItem))
	builder.WriteString(", user_pre_trade_money=")
	builder.WriteString(fmt.Sprintf("%v", t.UserPreTradeMoney))
	builder.WriteString(", user_post_trade_pre_event_money=")
	builder.WriteString(fmt.Sprintf("%v", t.UserPostTradePreEventMoney))
	builder.WriteString(", user_post_trade_post_event_money=")
	builder.WriteString(fmt.Sprintf("%v", t.UserPostTradePostEventMoney))
	builder.WriteString(", market_pre_trade_item=")
	builder.WriteString(fmt.Sprintf("%v", t.MarketPreTradeItem))
	builder.WriteString(", market_post_trade_pre_event_item=")
	builder.WriteString(fmt.Sprintf("%v", t.MarketPostTradePreEventItem))
	builder.WriteString(", market_post_trade_post_event_item=")
	builder.WriteString(fmt.Sprintf("%v", t.MarketPostTradePostEventItem))
	builder.WriteString(", market_pre_tradeMoney=")
	builder.WriteString(fmt.Sprintf("%v", t.MarketPreTradeMoney))
	builder.WriteString(", market_post_trade_pre_eventMoney=")
	builder.WriteString(fmt.Sprintf("%v", t.MarketPostTradePreEventMoney))
	builder.WriteString(", market_post_trade_post_eventMoney=")
	builder.WriteString(fmt.Sprintf("%v", t.MarketPostTradePostEventMoney))
	builder.WriteString(", dealer_dash=")
	builder.WriteString(fmt.Sprintf("%v", t.DealerDash))
	builder.WriteString(", wrangle_dashed_dealer=")
	builder.WriteString(fmt.Sprintf("%v", t.WrangleDashedDealer))
	builder.WriteString(", mugging=")
	builder.WriteString(fmt.Sprintf("%v", t.Mugging))
	builder.WriteString(", run_from_mugging=")
	builder.WriteString(fmt.Sprintf("%v", t.RunFromMugging))
	builder.WriteString(", gang_war=")
	builder.WriteString(fmt.Sprintf("%v", t.GangWar))
	builder.WriteString(", defend_gang_war=")
	builder.WriteString(fmt.Sprintf("%v", t.DefendGangWar))
	builder.WriteString(", cop_raid=")
	builder.WriteString(fmt.Sprintf("%v", t.CopRaid))
	builder.WriteString(", bribe_cops=")
	builder.WriteString(fmt.Sprintf("%v", t.BribeCops))
	builder.WriteString(", find_item=")
	builder.WriteString(fmt.Sprintf("%v", t.FindItem))
	builder.WriteString(", local_shipment=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalShipment))
	builder.WriteString(", warehouse_seizure=")
	builder.WriteString(fmt.Sprintf("%v", t.WarehouseSeizure))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Turns is a parsable slice of Turn.
type Turns []*Turn

func (t Turns) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
