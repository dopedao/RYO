// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/dopedao/RYO/api/ent/predicate"
	"github.com/dopedao/RYO/api/ent/schema"
	"github.com/dopedao/RYO/api/ent/turn"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTurn = "Turn"
)

// TurnMutation represents an operation that mutates the Turn nodes in the graph.
type TurnMutation struct {
	config
	op                                   Op
	typ                                  string
	id                                   *int
	user_id                              *string
	location_id                          *string
	item_id                              *string
	buy_or_sell                          *bool
	amount_to_give                       *schema.BigInt
	addamount_to_give                    *schema.BigInt
	user_combat_stats                    *[]int
	drug_lord_combat_stats               *[]int
	trade_occurs                         *bool
	user_pre_trade_item                  *schema.BigInt
	adduser_pre_trade_item               *schema.BigInt
	user_post_trade_pre_event_item       *schema.BigInt
	adduser_post_trade_pre_event_item    *schema.BigInt
	user_post_trade_post_event_item      *schema.BigInt
	adduser_post_trade_post_event_item   *schema.BigInt
	user_pre_trade_money                 *schema.BigInt
	adduser_pre_trade_money              *schema.BigInt
	user_post_trade_pre_event_money      *schema.BigInt
	adduser_post_trade_pre_event_money   *schema.BigInt
	user_post_trade_post_event_money     *schema.BigInt
	adduser_post_trade_post_event_money  *schema.BigInt
	market_pre_trade_item                *schema.BigInt
	addmarket_pre_trade_item             *schema.BigInt
	market_post_trade_pre_event_item     *schema.BigInt
	addmarket_post_trade_pre_event_item  *schema.BigInt
	market_post_trade_post_event_item    *schema.BigInt
	addmarket_post_trade_post_event_item *schema.BigInt
	market_pre_tradeMoney                *schema.BigInt
	addmarket_pre_tradeMoney             *schema.BigInt
	market_post_trade_pre_eventMoney     *schema.BigInt
	addmarket_post_trade_pre_eventMoney  *schema.BigInt
	market_post_trade_post_eventMoney    *schema.BigInt
	addmarket_post_trade_post_eventMoney *schema.BigInt
	dealer_dash                          *bool
	wrangle_dashed_dealer                *bool
	mugging                              *bool
	run_from_mugging                     *bool
	gang_war                             *bool
	defend_gang_war                      *bool
	cop_raid                             *bool
	bribe_cops                           *bool
	find_item                            *bool
	local_shipment                       *bool
	warehouse_seizure                    *bool
	created_at                           *time.Time
	clearedFields                        map[string]struct{}
	done                                 bool
	oldValue                             func(context.Context) (*Turn, error)
	predicates                           []predicate.Turn
}

var _ ent.Mutation = (*TurnMutation)(nil)

// turnOption allows management of the mutation configuration using functional options.
type turnOption func(*TurnMutation)

// newTurnMutation creates new mutation for the Turn entity.
func newTurnMutation(c config, op Op, opts ...turnOption) *TurnMutation {
	m := &TurnMutation{
		config:        c,
		op:            op,
		typ:           TypeTurn,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTurnID sets the ID field of the mutation.
func withTurnID(id int) turnOption {
	return func(m *TurnMutation) {
		var (
			err   error
			once  sync.Once
			value *Turn
		)
		m.oldValue = func(ctx context.Context) (*Turn, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Turn.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTurn sets the old Turn of the mutation.
func withTurn(node *Turn) turnOption {
	return func(m *TurnMutation) {
		m.oldValue = func(context.Context) (*Turn, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TurnMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TurnMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TurnMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the "user_id" field.
func (m *TurnMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TurnMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TurnMutation) ResetUserID() {
	m.user_id = nil
}

// SetLocationID sets the "location_id" field.
func (m *TurnMutation) SetLocationID(s string) {
	m.location_id = &s
}

// LocationID returns the value of the "location_id" field in the mutation.
func (m *TurnMutation) LocationID() (r string, exists bool) {
	v := m.location_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLocationID returns the old "location_id" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldLocationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLocationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLocationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocationID: %w", err)
	}
	return oldValue.LocationID, nil
}

// ResetLocationID resets all changes to the "location_id" field.
func (m *TurnMutation) ResetLocationID() {
	m.location_id = nil
}

// SetItemID sets the "item_id" field.
func (m *TurnMutation) SetItemID(s string) {
	m.item_id = &s
}

// ItemID returns the value of the "item_id" field in the mutation.
func (m *TurnMutation) ItemID() (r string, exists bool) {
	v := m.item_id
	if v == nil {
		return
	}
	return *v, true
}

// OldItemID returns the old "item_id" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldItemID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemID: %w", err)
	}
	return oldValue.ItemID, nil
}

// ResetItemID resets all changes to the "item_id" field.
func (m *TurnMutation) ResetItemID() {
	m.item_id = nil
}

// SetBuyOrSell sets the "buy_or_sell" field.
func (m *TurnMutation) SetBuyOrSell(b bool) {
	m.buy_or_sell = &b
}

// BuyOrSell returns the value of the "buy_or_sell" field in the mutation.
func (m *TurnMutation) BuyOrSell() (r bool, exists bool) {
	v := m.buy_or_sell
	if v == nil {
		return
	}
	return *v, true
}

// OldBuyOrSell returns the old "buy_or_sell" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldBuyOrSell(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBuyOrSell is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBuyOrSell requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuyOrSell: %w", err)
	}
	return oldValue.BuyOrSell, nil
}

// ResetBuyOrSell resets all changes to the "buy_or_sell" field.
func (m *TurnMutation) ResetBuyOrSell() {
	m.buy_or_sell = nil
}

// SetAmountToGive sets the "amount_to_give" field.
func (m *TurnMutation) SetAmountToGive(si schema.BigInt) {
	m.amount_to_give = &si
	m.addamount_to_give = nil
}

// AmountToGive returns the value of the "amount_to_give" field in the mutation.
func (m *TurnMutation) AmountToGive() (r schema.BigInt, exists bool) {
	v := m.amount_to_give
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountToGive returns the old "amount_to_give" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldAmountToGive(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmountToGive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmountToGive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountToGive: %w", err)
	}
	return oldValue.AmountToGive, nil
}

// AddAmountToGive adds si to the "amount_to_give" field.
func (m *TurnMutation) AddAmountToGive(si schema.BigInt) {
	if m.addamount_to_give != nil {
		*m.addamount_to_give = m.addamount_to_give.Add(si)
	} else {
		m.addamount_to_give = &si
	}
}

// AddedAmountToGive returns the value that was added to the "amount_to_give" field in this mutation.
func (m *TurnMutation) AddedAmountToGive() (r schema.BigInt, exists bool) {
	v := m.addamount_to_give
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmountToGive resets all changes to the "amount_to_give" field.
func (m *TurnMutation) ResetAmountToGive() {
	m.amount_to_give = nil
	m.addamount_to_give = nil
}

// SetUserCombatStats sets the "user_combat_stats" field.
func (m *TurnMutation) SetUserCombatStats(i []int) {
	m.user_combat_stats = &i
}

// UserCombatStats returns the value of the "user_combat_stats" field in the mutation.
func (m *TurnMutation) UserCombatStats() (r []int, exists bool) {
	v := m.user_combat_stats
	if v == nil {
		return
	}
	return *v, true
}

// OldUserCombatStats returns the old "user_combat_stats" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldUserCombatStats(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserCombatStats is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserCombatStats requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserCombatStats: %w", err)
	}
	return oldValue.UserCombatStats, nil
}

// ResetUserCombatStats resets all changes to the "user_combat_stats" field.
func (m *TurnMutation) ResetUserCombatStats() {
	m.user_combat_stats = nil
}

// SetDrugLordCombatStats sets the "drug_lord_combat_stats" field.
func (m *TurnMutation) SetDrugLordCombatStats(i []int) {
	m.drug_lord_combat_stats = &i
}

// DrugLordCombatStats returns the value of the "drug_lord_combat_stats" field in the mutation.
func (m *TurnMutation) DrugLordCombatStats() (r []int, exists bool) {
	v := m.drug_lord_combat_stats
	if v == nil {
		return
	}
	return *v, true
}

// OldDrugLordCombatStats returns the old "drug_lord_combat_stats" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldDrugLordCombatStats(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDrugLordCombatStats is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDrugLordCombatStats requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrugLordCombatStats: %w", err)
	}
	return oldValue.DrugLordCombatStats, nil
}

// ResetDrugLordCombatStats resets all changes to the "drug_lord_combat_stats" field.
func (m *TurnMutation) ResetDrugLordCombatStats() {
	m.drug_lord_combat_stats = nil
}

// SetTradeOccurs sets the "trade_occurs" field.
func (m *TurnMutation) SetTradeOccurs(b bool) {
	m.trade_occurs = &b
}

// TradeOccurs returns the value of the "trade_occurs" field in the mutation.
func (m *TurnMutation) TradeOccurs() (r bool, exists bool) {
	v := m.trade_occurs
	if v == nil {
		return
	}
	return *v, true
}

// OldTradeOccurs returns the old "trade_occurs" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldTradeOccurs(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTradeOccurs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTradeOccurs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradeOccurs: %w", err)
	}
	return oldValue.TradeOccurs, nil
}

// ResetTradeOccurs resets all changes to the "trade_occurs" field.
func (m *TurnMutation) ResetTradeOccurs() {
	m.trade_occurs = nil
}

// SetUserPreTradeItem sets the "user_pre_trade_item" field.
func (m *TurnMutation) SetUserPreTradeItem(si schema.BigInt) {
	m.user_pre_trade_item = &si
	m.adduser_pre_trade_item = nil
}

// UserPreTradeItem returns the value of the "user_pre_trade_item" field in the mutation.
func (m *TurnMutation) UserPreTradeItem() (r schema.BigInt, exists bool) {
	v := m.user_pre_trade_item
	if v == nil {
		return
	}
	return *v, true
}

// OldUserPreTradeItem returns the old "user_pre_trade_item" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldUserPreTradeItem(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserPreTradeItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserPreTradeItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserPreTradeItem: %w", err)
	}
	return oldValue.UserPreTradeItem, nil
}

// AddUserPreTradeItem adds si to the "user_pre_trade_item" field.
func (m *TurnMutation) AddUserPreTradeItem(si schema.BigInt) {
	if m.adduser_pre_trade_item != nil {
		*m.adduser_pre_trade_item = m.adduser_pre_trade_item.Add(si)
	} else {
		m.adduser_pre_trade_item = &si
	}
}

// AddedUserPreTradeItem returns the value that was added to the "user_pre_trade_item" field in this mutation.
func (m *TurnMutation) AddedUserPreTradeItem() (r schema.BigInt, exists bool) {
	v := m.adduser_pre_trade_item
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserPreTradeItem resets all changes to the "user_pre_trade_item" field.
func (m *TurnMutation) ResetUserPreTradeItem() {
	m.user_pre_trade_item = nil
	m.adduser_pre_trade_item = nil
}

// SetUserPostTradePreEventItem sets the "user_post_trade_pre_event_item" field.
func (m *TurnMutation) SetUserPostTradePreEventItem(si schema.BigInt) {
	m.user_post_trade_pre_event_item = &si
	m.adduser_post_trade_pre_event_item = nil
}

// UserPostTradePreEventItem returns the value of the "user_post_trade_pre_event_item" field in the mutation.
func (m *TurnMutation) UserPostTradePreEventItem() (r schema.BigInt, exists bool) {
	v := m.user_post_trade_pre_event_item
	if v == nil {
		return
	}
	return *v, true
}

// OldUserPostTradePreEventItem returns the old "user_post_trade_pre_event_item" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldUserPostTradePreEventItem(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserPostTradePreEventItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserPostTradePreEventItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserPostTradePreEventItem: %w", err)
	}
	return oldValue.UserPostTradePreEventItem, nil
}

// AddUserPostTradePreEventItem adds si to the "user_post_trade_pre_event_item" field.
func (m *TurnMutation) AddUserPostTradePreEventItem(si schema.BigInt) {
	if m.adduser_post_trade_pre_event_item != nil {
		*m.adduser_post_trade_pre_event_item = m.adduser_post_trade_pre_event_item.Add(si)
	} else {
		m.adduser_post_trade_pre_event_item = &si
	}
}

// AddedUserPostTradePreEventItem returns the value that was added to the "user_post_trade_pre_event_item" field in this mutation.
func (m *TurnMutation) AddedUserPostTradePreEventItem() (r schema.BigInt, exists bool) {
	v := m.adduser_post_trade_pre_event_item
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserPostTradePreEventItem resets all changes to the "user_post_trade_pre_event_item" field.
func (m *TurnMutation) ResetUserPostTradePreEventItem() {
	m.user_post_trade_pre_event_item = nil
	m.adduser_post_trade_pre_event_item = nil
}

// SetUserPostTradePostEventItem sets the "user_post_trade_post_event_item" field.
func (m *TurnMutation) SetUserPostTradePostEventItem(si schema.BigInt) {
	m.user_post_trade_post_event_item = &si
	m.adduser_post_trade_post_event_item = nil
}

// UserPostTradePostEventItem returns the value of the "user_post_trade_post_event_item" field in the mutation.
func (m *TurnMutation) UserPostTradePostEventItem() (r schema.BigInt, exists bool) {
	v := m.user_post_trade_post_event_item
	if v == nil {
		return
	}
	return *v, true
}

// OldUserPostTradePostEventItem returns the old "user_post_trade_post_event_item" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldUserPostTradePostEventItem(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserPostTradePostEventItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserPostTradePostEventItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserPostTradePostEventItem: %w", err)
	}
	return oldValue.UserPostTradePostEventItem, nil
}

// AddUserPostTradePostEventItem adds si to the "user_post_trade_post_event_item" field.
func (m *TurnMutation) AddUserPostTradePostEventItem(si schema.BigInt) {
	if m.adduser_post_trade_post_event_item != nil {
		*m.adduser_post_trade_post_event_item = m.adduser_post_trade_post_event_item.Add(si)
	} else {
		m.adduser_post_trade_post_event_item = &si
	}
}

// AddedUserPostTradePostEventItem returns the value that was added to the "user_post_trade_post_event_item" field in this mutation.
func (m *TurnMutation) AddedUserPostTradePostEventItem() (r schema.BigInt, exists bool) {
	v := m.adduser_post_trade_post_event_item
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserPostTradePostEventItem resets all changes to the "user_post_trade_post_event_item" field.
func (m *TurnMutation) ResetUserPostTradePostEventItem() {
	m.user_post_trade_post_event_item = nil
	m.adduser_post_trade_post_event_item = nil
}

// SetUserPreTradeMoney sets the "user_pre_trade_money" field.
func (m *TurnMutation) SetUserPreTradeMoney(si schema.BigInt) {
	m.user_pre_trade_money = &si
	m.adduser_pre_trade_money = nil
}

// UserPreTradeMoney returns the value of the "user_pre_trade_money" field in the mutation.
func (m *TurnMutation) UserPreTradeMoney() (r schema.BigInt, exists bool) {
	v := m.user_pre_trade_money
	if v == nil {
		return
	}
	return *v, true
}

// OldUserPreTradeMoney returns the old "user_pre_trade_money" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldUserPreTradeMoney(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserPreTradeMoney is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserPreTradeMoney requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserPreTradeMoney: %w", err)
	}
	return oldValue.UserPreTradeMoney, nil
}

// AddUserPreTradeMoney adds si to the "user_pre_trade_money" field.
func (m *TurnMutation) AddUserPreTradeMoney(si schema.BigInt) {
	if m.adduser_pre_trade_money != nil {
		*m.adduser_pre_trade_money = m.adduser_pre_trade_money.Add(si)
	} else {
		m.adduser_pre_trade_money = &si
	}
}

// AddedUserPreTradeMoney returns the value that was added to the "user_pre_trade_money" field in this mutation.
func (m *TurnMutation) AddedUserPreTradeMoney() (r schema.BigInt, exists bool) {
	v := m.adduser_pre_trade_money
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserPreTradeMoney resets all changes to the "user_pre_trade_money" field.
func (m *TurnMutation) ResetUserPreTradeMoney() {
	m.user_pre_trade_money = nil
	m.adduser_pre_trade_money = nil
}

// SetUserPostTradePreEventMoney sets the "user_post_trade_pre_event_money" field.
func (m *TurnMutation) SetUserPostTradePreEventMoney(si schema.BigInt) {
	m.user_post_trade_pre_event_money = &si
	m.adduser_post_trade_pre_event_money = nil
}

// UserPostTradePreEventMoney returns the value of the "user_post_trade_pre_event_money" field in the mutation.
func (m *TurnMutation) UserPostTradePreEventMoney() (r schema.BigInt, exists bool) {
	v := m.user_post_trade_pre_event_money
	if v == nil {
		return
	}
	return *v, true
}

// OldUserPostTradePreEventMoney returns the old "user_post_trade_pre_event_money" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldUserPostTradePreEventMoney(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserPostTradePreEventMoney is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserPostTradePreEventMoney requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserPostTradePreEventMoney: %w", err)
	}
	return oldValue.UserPostTradePreEventMoney, nil
}

// AddUserPostTradePreEventMoney adds si to the "user_post_trade_pre_event_money" field.
func (m *TurnMutation) AddUserPostTradePreEventMoney(si schema.BigInt) {
	if m.adduser_post_trade_pre_event_money != nil {
		*m.adduser_post_trade_pre_event_money = m.adduser_post_trade_pre_event_money.Add(si)
	} else {
		m.adduser_post_trade_pre_event_money = &si
	}
}

// AddedUserPostTradePreEventMoney returns the value that was added to the "user_post_trade_pre_event_money" field in this mutation.
func (m *TurnMutation) AddedUserPostTradePreEventMoney() (r schema.BigInt, exists bool) {
	v := m.adduser_post_trade_pre_event_money
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserPostTradePreEventMoney resets all changes to the "user_post_trade_pre_event_money" field.
func (m *TurnMutation) ResetUserPostTradePreEventMoney() {
	m.user_post_trade_pre_event_money = nil
	m.adduser_post_trade_pre_event_money = nil
}

// SetUserPostTradePostEventMoney sets the "user_post_trade_post_event_money" field.
func (m *TurnMutation) SetUserPostTradePostEventMoney(si schema.BigInt) {
	m.user_post_trade_post_event_money = &si
	m.adduser_post_trade_post_event_money = nil
}

// UserPostTradePostEventMoney returns the value of the "user_post_trade_post_event_money" field in the mutation.
func (m *TurnMutation) UserPostTradePostEventMoney() (r schema.BigInt, exists bool) {
	v := m.user_post_trade_post_event_money
	if v == nil {
		return
	}
	return *v, true
}

// OldUserPostTradePostEventMoney returns the old "user_post_trade_post_event_money" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldUserPostTradePostEventMoney(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserPostTradePostEventMoney is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserPostTradePostEventMoney requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserPostTradePostEventMoney: %w", err)
	}
	return oldValue.UserPostTradePostEventMoney, nil
}

// AddUserPostTradePostEventMoney adds si to the "user_post_trade_post_event_money" field.
func (m *TurnMutation) AddUserPostTradePostEventMoney(si schema.BigInt) {
	if m.adduser_post_trade_post_event_money != nil {
		*m.adduser_post_trade_post_event_money = m.adduser_post_trade_post_event_money.Add(si)
	} else {
		m.adduser_post_trade_post_event_money = &si
	}
}

// AddedUserPostTradePostEventMoney returns the value that was added to the "user_post_trade_post_event_money" field in this mutation.
func (m *TurnMutation) AddedUserPostTradePostEventMoney() (r schema.BigInt, exists bool) {
	v := m.adduser_post_trade_post_event_money
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserPostTradePostEventMoney resets all changes to the "user_post_trade_post_event_money" field.
func (m *TurnMutation) ResetUserPostTradePostEventMoney() {
	m.user_post_trade_post_event_money = nil
	m.adduser_post_trade_post_event_money = nil
}

// SetMarketPreTradeItem sets the "market_pre_trade_item" field.
func (m *TurnMutation) SetMarketPreTradeItem(si schema.BigInt) {
	m.market_pre_trade_item = &si
	m.addmarket_pre_trade_item = nil
}

// MarketPreTradeItem returns the value of the "market_pre_trade_item" field in the mutation.
func (m *TurnMutation) MarketPreTradeItem() (r schema.BigInt, exists bool) {
	v := m.market_pre_trade_item
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketPreTradeItem returns the old "market_pre_trade_item" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldMarketPreTradeItem(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMarketPreTradeItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMarketPreTradeItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketPreTradeItem: %w", err)
	}
	return oldValue.MarketPreTradeItem, nil
}

// AddMarketPreTradeItem adds si to the "market_pre_trade_item" field.
func (m *TurnMutation) AddMarketPreTradeItem(si schema.BigInt) {
	if m.addmarket_pre_trade_item != nil {
		*m.addmarket_pre_trade_item = m.addmarket_pre_trade_item.Add(si)
	} else {
		m.addmarket_pre_trade_item = &si
	}
}

// AddedMarketPreTradeItem returns the value that was added to the "market_pre_trade_item" field in this mutation.
func (m *TurnMutation) AddedMarketPreTradeItem() (r schema.BigInt, exists bool) {
	v := m.addmarket_pre_trade_item
	if v == nil {
		return
	}
	return *v, true
}

// ResetMarketPreTradeItem resets all changes to the "market_pre_trade_item" field.
func (m *TurnMutation) ResetMarketPreTradeItem() {
	m.market_pre_trade_item = nil
	m.addmarket_pre_trade_item = nil
}

// SetMarketPostTradePreEventItem sets the "market_post_trade_pre_event_item" field.
func (m *TurnMutation) SetMarketPostTradePreEventItem(si schema.BigInt) {
	m.market_post_trade_pre_event_item = &si
	m.addmarket_post_trade_pre_event_item = nil
}

// MarketPostTradePreEventItem returns the value of the "market_post_trade_pre_event_item" field in the mutation.
func (m *TurnMutation) MarketPostTradePreEventItem() (r schema.BigInt, exists bool) {
	v := m.market_post_trade_pre_event_item
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketPostTradePreEventItem returns the old "market_post_trade_pre_event_item" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldMarketPostTradePreEventItem(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMarketPostTradePreEventItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMarketPostTradePreEventItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketPostTradePreEventItem: %w", err)
	}
	return oldValue.MarketPostTradePreEventItem, nil
}

// AddMarketPostTradePreEventItem adds si to the "market_post_trade_pre_event_item" field.
func (m *TurnMutation) AddMarketPostTradePreEventItem(si schema.BigInt) {
	if m.addmarket_post_trade_pre_event_item != nil {
		*m.addmarket_post_trade_pre_event_item = m.addmarket_post_trade_pre_event_item.Add(si)
	} else {
		m.addmarket_post_trade_pre_event_item = &si
	}
}

// AddedMarketPostTradePreEventItem returns the value that was added to the "market_post_trade_pre_event_item" field in this mutation.
func (m *TurnMutation) AddedMarketPostTradePreEventItem() (r schema.BigInt, exists bool) {
	v := m.addmarket_post_trade_pre_event_item
	if v == nil {
		return
	}
	return *v, true
}

// ResetMarketPostTradePreEventItem resets all changes to the "market_post_trade_pre_event_item" field.
func (m *TurnMutation) ResetMarketPostTradePreEventItem() {
	m.market_post_trade_pre_event_item = nil
	m.addmarket_post_trade_pre_event_item = nil
}

// SetMarketPostTradePostEventItem sets the "market_post_trade_post_event_item" field.
func (m *TurnMutation) SetMarketPostTradePostEventItem(si schema.BigInt) {
	m.market_post_trade_post_event_item = &si
	m.addmarket_post_trade_post_event_item = nil
}

// MarketPostTradePostEventItem returns the value of the "market_post_trade_post_event_item" field in the mutation.
func (m *TurnMutation) MarketPostTradePostEventItem() (r schema.BigInt, exists bool) {
	v := m.market_post_trade_post_event_item
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketPostTradePostEventItem returns the old "market_post_trade_post_event_item" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldMarketPostTradePostEventItem(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMarketPostTradePostEventItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMarketPostTradePostEventItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketPostTradePostEventItem: %w", err)
	}
	return oldValue.MarketPostTradePostEventItem, nil
}

// AddMarketPostTradePostEventItem adds si to the "market_post_trade_post_event_item" field.
func (m *TurnMutation) AddMarketPostTradePostEventItem(si schema.BigInt) {
	if m.addmarket_post_trade_post_event_item != nil {
		*m.addmarket_post_trade_post_event_item = m.addmarket_post_trade_post_event_item.Add(si)
	} else {
		m.addmarket_post_trade_post_event_item = &si
	}
}

// AddedMarketPostTradePostEventItem returns the value that was added to the "market_post_trade_post_event_item" field in this mutation.
func (m *TurnMutation) AddedMarketPostTradePostEventItem() (r schema.BigInt, exists bool) {
	v := m.addmarket_post_trade_post_event_item
	if v == nil {
		return
	}
	return *v, true
}

// ResetMarketPostTradePostEventItem resets all changes to the "market_post_trade_post_event_item" field.
func (m *TurnMutation) ResetMarketPostTradePostEventItem() {
	m.market_post_trade_post_event_item = nil
	m.addmarket_post_trade_post_event_item = nil
}

// SetMarketPreTradeMoney sets the "market_pre_tradeMoney" field.
func (m *TurnMutation) SetMarketPreTradeMoney(si schema.BigInt) {
	m.market_pre_tradeMoney = &si
	m.addmarket_pre_tradeMoney = nil
}

// MarketPreTradeMoney returns the value of the "market_pre_tradeMoney" field in the mutation.
func (m *TurnMutation) MarketPreTradeMoney() (r schema.BigInt, exists bool) {
	v := m.market_pre_tradeMoney
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketPreTradeMoney returns the old "market_pre_tradeMoney" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldMarketPreTradeMoney(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMarketPreTradeMoney is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMarketPreTradeMoney requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketPreTradeMoney: %w", err)
	}
	return oldValue.MarketPreTradeMoney, nil
}

// AddMarketPreTradeMoney adds si to the "market_pre_tradeMoney" field.
func (m *TurnMutation) AddMarketPreTradeMoney(si schema.BigInt) {
	if m.addmarket_pre_tradeMoney != nil {
		*m.addmarket_pre_tradeMoney = m.addmarket_pre_tradeMoney.Add(si)
	} else {
		m.addmarket_pre_tradeMoney = &si
	}
}

// AddedMarketPreTradeMoney returns the value that was added to the "market_pre_tradeMoney" field in this mutation.
func (m *TurnMutation) AddedMarketPreTradeMoney() (r schema.BigInt, exists bool) {
	v := m.addmarket_pre_tradeMoney
	if v == nil {
		return
	}
	return *v, true
}

// ResetMarketPreTradeMoney resets all changes to the "market_pre_tradeMoney" field.
func (m *TurnMutation) ResetMarketPreTradeMoney() {
	m.market_pre_tradeMoney = nil
	m.addmarket_pre_tradeMoney = nil
}

// SetMarketPostTradePreEventMoney sets the "market_post_trade_pre_eventMoney" field.
func (m *TurnMutation) SetMarketPostTradePreEventMoney(si schema.BigInt) {
	m.market_post_trade_pre_eventMoney = &si
	m.addmarket_post_trade_pre_eventMoney = nil
}

// MarketPostTradePreEventMoney returns the value of the "market_post_trade_pre_eventMoney" field in the mutation.
func (m *TurnMutation) MarketPostTradePreEventMoney() (r schema.BigInt, exists bool) {
	v := m.market_post_trade_pre_eventMoney
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketPostTradePreEventMoney returns the old "market_post_trade_pre_eventMoney" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldMarketPostTradePreEventMoney(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMarketPostTradePreEventMoney is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMarketPostTradePreEventMoney requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketPostTradePreEventMoney: %w", err)
	}
	return oldValue.MarketPostTradePreEventMoney, nil
}

// AddMarketPostTradePreEventMoney adds si to the "market_post_trade_pre_eventMoney" field.
func (m *TurnMutation) AddMarketPostTradePreEventMoney(si schema.BigInt) {
	if m.addmarket_post_trade_pre_eventMoney != nil {
		*m.addmarket_post_trade_pre_eventMoney = m.addmarket_post_trade_pre_eventMoney.Add(si)
	} else {
		m.addmarket_post_trade_pre_eventMoney = &si
	}
}

// AddedMarketPostTradePreEventMoney returns the value that was added to the "market_post_trade_pre_eventMoney" field in this mutation.
func (m *TurnMutation) AddedMarketPostTradePreEventMoney() (r schema.BigInt, exists bool) {
	v := m.addmarket_post_trade_pre_eventMoney
	if v == nil {
		return
	}
	return *v, true
}

// ResetMarketPostTradePreEventMoney resets all changes to the "market_post_trade_pre_eventMoney" field.
func (m *TurnMutation) ResetMarketPostTradePreEventMoney() {
	m.market_post_trade_pre_eventMoney = nil
	m.addmarket_post_trade_pre_eventMoney = nil
}

// SetMarketPostTradePostEventMoney sets the "market_post_trade_post_eventMoney" field.
func (m *TurnMutation) SetMarketPostTradePostEventMoney(si schema.BigInt) {
	m.market_post_trade_post_eventMoney = &si
	m.addmarket_post_trade_post_eventMoney = nil
}

// MarketPostTradePostEventMoney returns the value of the "market_post_trade_post_eventMoney" field in the mutation.
func (m *TurnMutation) MarketPostTradePostEventMoney() (r schema.BigInt, exists bool) {
	v := m.market_post_trade_post_eventMoney
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketPostTradePostEventMoney returns the old "market_post_trade_post_eventMoney" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldMarketPostTradePostEventMoney(ctx context.Context) (v schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMarketPostTradePostEventMoney is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMarketPostTradePostEventMoney requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketPostTradePostEventMoney: %w", err)
	}
	return oldValue.MarketPostTradePostEventMoney, nil
}

// AddMarketPostTradePostEventMoney adds si to the "market_post_trade_post_eventMoney" field.
func (m *TurnMutation) AddMarketPostTradePostEventMoney(si schema.BigInt) {
	if m.addmarket_post_trade_post_eventMoney != nil {
		*m.addmarket_post_trade_post_eventMoney = m.addmarket_post_trade_post_eventMoney.Add(si)
	} else {
		m.addmarket_post_trade_post_eventMoney = &si
	}
}

// AddedMarketPostTradePostEventMoney returns the value that was added to the "market_post_trade_post_eventMoney" field in this mutation.
func (m *TurnMutation) AddedMarketPostTradePostEventMoney() (r schema.BigInt, exists bool) {
	v := m.addmarket_post_trade_post_eventMoney
	if v == nil {
		return
	}
	return *v, true
}

// ResetMarketPostTradePostEventMoney resets all changes to the "market_post_trade_post_eventMoney" field.
func (m *TurnMutation) ResetMarketPostTradePostEventMoney() {
	m.market_post_trade_post_eventMoney = nil
	m.addmarket_post_trade_post_eventMoney = nil
}

// SetDealerDash sets the "dealer_dash" field.
func (m *TurnMutation) SetDealerDash(b bool) {
	m.dealer_dash = &b
}

// DealerDash returns the value of the "dealer_dash" field in the mutation.
func (m *TurnMutation) DealerDash() (r bool, exists bool) {
	v := m.dealer_dash
	if v == nil {
		return
	}
	return *v, true
}

// OldDealerDash returns the old "dealer_dash" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldDealerDash(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDealerDash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDealerDash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDealerDash: %w", err)
	}
	return oldValue.DealerDash, nil
}

// ResetDealerDash resets all changes to the "dealer_dash" field.
func (m *TurnMutation) ResetDealerDash() {
	m.dealer_dash = nil
}

// SetWrangleDashedDealer sets the "wrangle_dashed_dealer" field.
func (m *TurnMutation) SetWrangleDashedDealer(b bool) {
	m.wrangle_dashed_dealer = &b
}

// WrangleDashedDealer returns the value of the "wrangle_dashed_dealer" field in the mutation.
func (m *TurnMutation) WrangleDashedDealer() (r bool, exists bool) {
	v := m.wrangle_dashed_dealer
	if v == nil {
		return
	}
	return *v, true
}

// OldWrangleDashedDealer returns the old "wrangle_dashed_dealer" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldWrangleDashedDealer(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWrangleDashedDealer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWrangleDashedDealer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWrangleDashedDealer: %w", err)
	}
	return oldValue.WrangleDashedDealer, nil
}

// ResetWrangleDashedDealer resets all changes to the "wrangle_dashed_dealer" field.
func (m *TurnMutation) ResetWrangleDashedDealer() {
	m.wrangle_dashed_dealer = nil
}

// SetMugging sets the "mugging" field.
func (m *TurnMutation) SetMugging(b bool) {
	m.mugging = &b
}

// Mugging returns the value of the "mugging" field in the mutation.
func (m *TurnMutation) Mugging() (r bool, exists bool) {
	v := m.mugging
	if v == nil {
		return
	}
	return *v, true
}

// OldMugging returns the old "mugging" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldMugging(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMugging is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMugging requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMugging: %w", err)
	}
	return oldValue.Mugging, nil
}

// ResetMugging resets all changes to the "mugging" field.
func (m *TurnMutation) ResetMugging() {
	m.mugging = nil
}

// SetRunFromMugging sets the "run_from_mugging" field.
func (m *TurnMutation) SetRunFromMugging(b bool) {
	m.run_from_mugging = &b
}

// RunFromMugging returns the value of the "run_from_mugging" field in the mutation.
func (m *TurnMutation) RunFromMugging() (r bool, exists bool) {
	v := m.run_from_mugging
	if v == nil {
		return
	}
	return *v, true
}

// OldRunFromMugging returns the old "run_from_mugging" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldRunFromMugging(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRunFromMugging is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRunFromMugging requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRunFromMugging: %w", err)
	}
	return oldValue.RunFromMugging, nil
}

// ResetRunFromMugging resets all changes to the "run_from_mugging" field.
func (m *TurnMutation) ResetRunFromMugging() {
	m.run_from_mugging = nil
}

// SetGangWar sets the "gang_war" field.
func (m *TurnMutation) SetGangWar(b bool) {
	m.gang_war = &b
}

// GangWar returns the value of the "gang_war" field in the mutation.
func (m *TurnMutation) GangWar() (r bool, exists bool) {
	v := m.gang_war
	if v == nil {
		return
	}
	return *v, true
}

// OldGangWar returns the old "gang_war" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldGangWar(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGangWar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGangWar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGangWar: %w", err)
	}
	return oldValue.GangWar, nil
}

// ResetGangWar resets all changes to the "gang_war" field.
func (m *TurnMutation) ResetGangWar() {
	m.gang_war = nil
}

// SetDefendGangWar sets the "defend_gang_war" field.
func (m *TurnMutation) SetDefendGangWar(b bool) {
	m.defend_gang_war = &b
}

// DefendGangWar returns the value of the "defend_gang_war" field in the mutation.
func (m *TurnMutation) DefendGangWar() (r bool, exists bool) {
	v := m.defend_gang_war
	if v == nil {
		return
	}
	return *v, true
}

// OldDefendGangWar returns the old "defend_gang_war" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldDefendGangWar(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDefendGangWar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDefendGangWar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefendGangWar: %w", err)
	}
	return oldValue.DefendGangWar, nil
}

// ResetDefendGangWar resets all changes to the "defend_gang_war" field.
func (m *TurnMutation) ResetDefendGangWar() {
	m.defend_gang_war = nil
}

// SetCopRaid sets the "cop_raid" field.
func (m *TurnMutation) SetCopRaid(b bool) {
	m.cop_raid = &b
}

// CopRaid returns the value of the "cop_raid" field in the mutation.
func (m *TurnMutation) CopRaid() (r bool, exists bool) {
	v := m.cop_raid
	if v == nil {
		return
	}
	return *v, true
}

// OldCopRaid returns the old "cop_raid" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldCopRaid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCopRaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCopRaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCopRaid: %w", err)
	}
	return oldValue.CopRaid, nil
}

// ResetCopRaid resets all changes to the "cop_raid" field.
func (m *TurnMutation) ResetCopRaid() {
	m.cop_raid = nil
}

// SetBribeCops sets the "bribe_cops" field.
func (m *TurnMutation) SetBribeCops(b bool) {
	m.bribe_cops = &b
}

// BribeCops returns the value of the "bribe_cops" field in the mutation.
func (m *TurnMutation) BribeCops() (r bool, exists bool) {
	v := m.bribe_cops
	if v == nil {
		return
	}
	return *v, true
}

// OldBribeCops returns the old "bribe_cops" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldBribeCops(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBribeCops is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBribeCops requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBribeCops: %w", err)
	}
	return oldValue.BribeCops, nil
}

// ResetBribeCops resets all changes to the "bribe_cops" field.
func (m *TurnMutation) ResetBribeCops() {
	m.bribe_cops = nil
}

// SetFindItem sets the "find_item" field.
func (m *TurnMutation) SetFindItem(b bool) {
	m.find_item = &b
}

// FindItem returns the value of the "find_item" field in the mutation.
func (m *TurnMutation) FindItem() (r bool, exists bool) {
	v := m.find_item
	if v == nil {
		return
	}
	return *v, true
}

// OldFindItem returns the old "find_item" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldFindItem(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFindItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFindItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFindItem: %w", err)
	}
	return oldValue.FindItem, nil
}

// ResetFindItem resets all changes to the "find_item" field.
func (m *TurnMutation) ResetFindItem() {
	m.find_item = nil
}

// SetLocalShipment sets the "local_shipment" field.
func (m *TurnMutation) SetLocalShipment(b bool) {
	m.local_shipment = &b
}

// LocalShipment returns the value of the "local_shipment" field in the mutation.
func (m *TurnMutation) LocalShipment() (r bool, exists bool) {
	v := m.local_shipment
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalShipment returns the old "local_shipment" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldLocalShipment(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLocalShipment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLocalShipment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalShipment: %w", err)
	}
	return oldValue.LocalShipment, nil
}

// ResetLocalShipment resets all changes to the "local_shipment" field.
func (m *TurnMutation) ResetLocalShipment() {
	m.local_shipment = nil
}

// SetWarehouseSeizure sets the "warehouse_seizure" field.
func (m *TurnMutation) SetWarehouseSeizure(b bool) {
	m.warehouse_seizure = &b
}

// WarehouseSeizure returns the value of the "warehouse_seizure" field in the mutation.
func (m *TurnMutation) WarehouseSeizure() (r bool, exists bool) {
	v := m.warehouse_seizure
	if v == nil {
		return
	}
	return *v, true
}

// OldWarehouseSeizure returns the old "warehouse_seizure" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldWarehouseSeizure(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWarehouseSeizure is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWarehouseSeizure requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWarehouseSeizure: %w", err)
	}
	return oldValue.WarehouseSeizure, nil
}

// ResetWarehouseSeizure resets all changes to the "warehouse_seizure" field.
func (m *TurnMutation) ResetWarehouseSeizure() {
	m.warehouse_seizure = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TurnMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TurnMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Turn entity.
// If the Turn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TurnMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TurnMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the TurnMutation builder.
func (m *TurnMutation) Where(ps ...predicate.Turn) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TurnMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Turn).
func (m *TurnMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TurnMutation) Fields() []string {
	fields := make([]string, 0, 32)
	if m.user_id != nil {
		fields = append(fields, turn.FieldUserID)
	}
	if m.location_id != nil {
		fields = append(fields, turn.FieldLocationID)
	}
	if m.item_id != nil {
		fields = append(fields, turn.FieldItemID)
	}
	if m.buy_or_sell != nil {
		fields = append(fields, turn.FieldBuyOrSell)
	}
	if m.amount_to_give != nil {
		fields = append(fields, turn.FieldAmountToGive)
	}
	if m.user_combat_stats != nil {
		fields = append(fields, turn.FieldUserCombatStats)
	}
	if m.drug_lord_combat_stats != nil {
		fields = append(fields, turn.FieldDrugLordCombatStats)
	}
	if m.trade_occurs != nil {
		fields = append(fields, turn.FieldTradeOccurs)
	}
	if m.user_pre_trade_item != nil {
		fields = append(fields, turn.FieldUserPreTradeItem)
	}
	if m.user_post_trade_pre_event_item != nil {
		fields = append(fields, turn.FieldUserPostTradePreEventItem)
	}
	if m.user_post_trade_post_event_item != nil {
		fields = append(fields, turn.FieldUserPostTradePostEventItem)
	}
	if m.user_pre_trade_money != nil {
		fields = append(fields, turn.FieldUserPreTradeMoney)
	}
	if m.user_post_trade_pre_event_money != nil {
		fields = append(fields, turn.FieldUserPostTradePreEventMoney)
	}
	if m.user_post_trade_post_event_money != nil {
		fields = append(fields, turn.FieldUserPostTradePostEventMoney)
	}
	if m.market_pre_trade_item != nil {
		fields = append(fields, turn.FieldMarketPreTradeItem)
	}
	if m.market_post_trade_pre_event_item != nil {
		fields = append(fields, turn.FieldMarketPostTradePreEventItem)
	}
	if m.market_post_trade_post_event_item != nil {
		fields = append(fields, turn.FieldMarketPostTradePostEventItem)
	}
	if m.market_pre_tradeMoney != nil {
		fields = append(fields, turn.FieldMarketPreTradeMoney)
	}
	if m.market_post_trade_pre_eventMoney != nil {
		fields = append(fields, turn.FieldMarketPostTradePreEventMoney)
	}
	if m.market_post_trade_post_eventMoney != nil {
		fields = append(fields, turn.FieldMarketPostTradePostEventMoney)
	}
	if m.dealer_dash != nil {
		fields = append(fields, turn.FieldDealerDash)
	}
	if m.wrangle_dashed_dealer != nil {
		fields = append(fields, turn.FieldWrangleDashedDealer)
	}
	if m.mugging != nil {
		fields = append(fields, turn.FieldMugging)
	}
	if m.run_from_mugging != nil {
		fields = append(fields, turn.FieldRunFromMugging)
	}
	if m.gang_war != nil {
		fields = append(fields, turn.FieldGangWar)
	}
	if m.defend_gang_war != nil {
		fields = append(fields, turn.FieldDefendGangWar)
	}
	if m.cop_raid != nil {
		fields = append(fields, turn.FieldCopRaid)
	}
	if m.bribe_cops != nil {
		fields = append(fields, turn.FieldBribeCops)
	}
	if m.find_item != nil {
		fields = append(fields, turn.FieldFindItem)
	}
	if m.local_shipment != nil {
		fields = append(fields, turn.FieldLocalShipment)
	}
	if m.warehouse_seizure != nil {
		fields = append(fields, turn.FieldWarehouseSeizure)
	}
	if m.created_at != nil {
		fields = append(fields, turn.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TurnMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case turn.FieldUserID:
		return m.UserID()
	case turn.FieldLocationID:
		return m.LocationID()
	case turn.FieldItemID:
		return m.ItemID()
	case turn.FieldBuyOrSell:
		return m.BuyOrSell()
	case turn.FieldAmountToGive:
		return m.AmountToGive()
	case turn.FieldUserCombatStats:
		return m.UserCombatStats()
	case turn.FieldDrugLordCombatStats:
		return m.DrugLordCombatStats()
	case turn.FieldTradeOccurs:
		return m.TradeOccurs()
	case turn.FieldUserPreTradeItem:
		return m.UserPreTradeItem()
	case turn.FieldUserPostTradePreEventItem:
		return m.UserPostTradePreEventItem()
	case turn.FieldUserPostTradePostEventItem:
		return m.UserPostTradePostEventItem()
	case turn.FieldUserPreTradeMoney:
		return m.UserPreTradeMoney()
	case turn.FieldUserPostTradePreEventMoney:
		return m.UserPostTradePreEventMoney()
	case turn.FieldUserPostTradePostEventMoney:
		return m.UserPostTradePostEventMoney()
	case turn.FieldMarketPreTradeItem:
		return m.MarketPreTradeItem()
	case turn.FieldMarketPostTradePreEventItem:
		return m.MarketPostTradePreEventItem()
	case turn.FieldMarketPostTradePostEventItem:
		return m.MarketPostTradePostEventItem()
	case turn.FieldMarketPreTradeMoney:
		return m.MarketPreTradeMoney()
	case turn.FieldMarketPostTradePreEventMoney:
		return m.MarketPostTradePreEventMoney()
	case turn.FieldMarketPostTradePostEventMoney:
		return m.MarketPostTradePostEventMoney()
	case turn.FieldDealerDash:
		return m.DealerDash()
	case turn.FieldWrangleDashedDealer:
		return m.WrangleDashedDealer()
	case turn.FieldMugging:
		return m.Mugging()
	case turn.FieldRunFromMugging:
		return m.RunFromMugging()
	case turn.FieldGangWar:
		return m.GangWar()
	case turn.FieldDefendGangWar:
		return m.DefendGangWar()
	case turn.FieldCopRaid:
		return m.CopRaid()
	case turn.FieldBribeCops:
		return m.BribeCops()
	case turn.FieldFindItem:
		return m.FindItem()
	case turn.FieldLocalShipment:
		return m.LocalShipment()
	case turn.FieldWarehouseSeizure:
		return m.WarehouseSeizure()
	case turn.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TurnMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case turn.FieldUserID:
		return m.OldUserID(ctx)
	case turn.FieldLocationID:
		return m.OldLocationID(ctx)
	case turn.FieldItemID:
		return m.OldItemID(ctx)
	case turn.FieldBuyOrSell:
		return m.OldBuyOrSell(ctx)
	case turn.FieldAmountToGive:
		return m.OldAmountToGive(ctx)
	case turn.FieldUserCombatStats:
		return m.OldUserCombatStats(ctx)
	case turn.FieldDrugLordCombatStats:
		return m.OldDrugLordCombatStats(ctx)
	case turn.FieldTradeOccurs:
		return m.OldTradeOccurs(ctx)
	case turn.FieldUserPreTradeItem:
		return m.OldUserPreTradeItem(ctx)
	case turn.FieldUserPostTradePreEventItem:
		return m.OldUserPostTradePreEventItem(ctx)
	case turn.FieldUserPostTradePostEventItem:
		return m.OldUserPostTradePostEventItem(ctx)
	case turn.FieldUserPreTradeMoney:
		return m.OldUserPreTradeMoney(ctx)
	case turn.FieldUserPostTradePreEventMoney:
		return m.OldUserPostTradePreEventMoney(ctx)
	case turn.FieldUserPostTradePostEventMoney:
		return m.OldUserPostTradePostEventMoney(ctx)
	case turn.FieldMarketPreTradeItem:
		return m.OldMarketPreTradeItem(ctx)
	case turn.FieldMarketPostTradePreEventItem:
		return m.OldMarketPostTradePreEventItem(ctx)
	case turn.FieldMarketPostTradePostEventItem:
		return m.OldMarketPostTradePostEventItem(ctx)
	case turn.FieldMarketPreTradeMoney:
		return m.OldMarketPreTradeMoney(ctx)
	case turn.FieldMarketPostTradePreEventMoney:
		return m.OldMarketPostTradePreEventMoney(ctx)
	case turn.FieldMarketPostTradePostEventMoney:
		return m.OldMarketPostTradePostEventMoney(ctx)
	case turn.FieldDealerDash:
		return m.OldDealerDash(ctx)
	case turn.FieldWrangleDashedDealer:
		return m.OldWrangleDashedDealer(ctx)
	case turn.FieldMugging:
		return m.OldMugging(ctx)
	case turn.FieldRunFromMugging:
		return m.OldRunFromMugging(ctx)
	case turn.FieldGangWar:
		return m.OldGangWar(ctx)
	case turn.FieldDefendGangWar:
		return m.OldDefendGangWar(ctx)
	case turn.FieldCopRaid:
		return m.OldCopRaid(ctx)
	case turn.FieldBribeCops:
		return m.OldBribeCops(ctx)
	case turn.FieldFindItem:
		return m.OldFindItem(ctx)
	case turn.FieldLocalShipment:
		return m.OldLocalShipment(ctx)
	case turn.FieldWarehouseSeizure:
		return m.OldWarehouseSeizure(ctx)
	case turn.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Turn field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TurnMutation) SetField(name string, value ent.Value) error {
	switch name {
	case turn.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case turn.FieldLocationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocationID(v)
		return nil
	case turn.FieldItemID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemID(v)
		return nil
	case turn.FieldBuyOrSell:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuyOrSell(v)
		return nil
	case turn.FieldAmountToGive:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountToGive(v)
		return nil
	case turn.FieldUserCombatStats:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserCombatStats(v)
		return nil
	case turn.FieldDrugLordCombatStats:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrugLordCombatStats(v)
		return nil
	case turn.FieldTradeOccurs:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradeOccurs(v)
		return nil
	case turn.FieldUserPreTradeItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserPreTradeItem(v)
		return nil
	case turn.FieldUserPostTradePreEventItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserPostTradePreEventItem(v)
		return nil
	case turn.FieldUserPostTradePostEventItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserPostTradePostEventItem(v)
		return nil
	case turn.FieldUserPreTradeMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserPreTradeMoney(v)
		return nil
	case turn.FieldUserPostTradePreEventMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserPostTradePreEventMoney(v)
		return nil
	case turn.FieldUserPostTradePostEventMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserPostTradePostEventMoney(v)
		return nil
	case turn.FieldMarketPreTradeItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketPreTradeItem(v)
		return nil
	case turn.FieldMarketPostTradePreEventItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketPostTradePreEventItem(v)
		return nil
	case turn.FieldMarketPostTradePostEventItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketPostTradePostEventItem(v)
		return nil
	case turn.FieldMarketPreTradeMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketPreTradeMoney(v)
		return nil
	case turn.FieldMarketPostTradePreEventMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketPostTradePreEventMoney(v)
		return nil
	case turn.FieldMarketPostTradePostEventMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketPostTradePostEventMoney(v)
		return nil
	case turn.FieldDealerDash:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDealerDash(v)
		return nil
	case turn.FieldWrangleDashedDealer:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWrangleDashedDealer(v)
		return nil
	case turn.FieldMugging:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMugging(v)
		return nil
	case turn.FieldRunFromMugging:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRunFromMugging(v)
		return nil
	case turn.FieldGangWar:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGangWar(v)
		return nil
	case turn.FieldDefendGangWar:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefendGangWar(v)
		return nil
	case turn.FieldCopRaid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCopRaid(v)
		return nil
	case turn.FieldBribeCops:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBribeCops(v)
		return nil
	case turn.FieldFindItem:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFindItem(v)
		return nil
	case turn.FieldLocalShipment:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalShipment(v)
		return nil
	case turn.FieldWarehouseSeizure:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWarehouseSeizure(v)
		return nil
	case turn.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Turn field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TurnMutation) AddedFields() []string {
	var fields []string
	if m.addamount_to_give != nil {
		fields = append(fields, turn.FieldAmountToGive)
	}
	if m.adduser_pre_trade_item != nil {
		fields = append(fields, turn.FieldUserPreTradeItem)
	}
	if m.adduser_post_trade_pre_event_item != nil {
		fields = append(fields, turn.FieldUserPostTradePreEventItem)
	}
	if m.adduser_post_trade_post_event_item != nil {
		fields = append(fields, turn.FieldUserPostTradePostEventItem)
	}
	if m.adduser_pre_trade_money != nil {
		fields = append(fields, turn.FieldUserPreTradeMoney)
	}
	if m.adduser_post_trade_pre_event_money != nil {
		fields = append(fields, turn.FieldUserPostTradePreEventMoney)
	}
	if m.adduser_post_trade_post_event_money != nil {
		fields = append(fields, turn.FieldUserPostTradePostEventMoney)
	}
	if m.addmarket_pre_trade_item != nil {
		fields = append(fields, turn.FieldMarketPreTradeItem)
	}
	if m.addmarket_post_trade_pre_event_item != nil {
		fields = append(fields, turn.FieldMarketPostTradePreEventItem)
	}
	if m.addmarket_post_trade_post_event_item != nil {
		fields = append(fields, turn.FieldMarketPostTradePostEventItem)
	}
	if m.addmarket_pre_tradeMoney != nil {
		fields = append(fields, turn.FieldMarketPreTradeMoney)
	}
	if m.addmarket_post_trade_pre_eventMoney != nil {
		fields = append(fields, turn.FieldMarketPostTradePreEventMoney)
	}
	if m.addmarket_post_trade_post_eventMoney != nil {
		fields = append(fields, turn.FieldMarketPostTradePostEventMoney)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TurnMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case turn.FieldAmountToGive:
		return m.AddedAmountToGive()
	case turn.FieldUserPreTradeItem:
		return m.AddedUserPreTradeItem()
	case turn.FieldUserPostTradePreEventItem:
		return m.AddedUserPostTradePreEventItem()
	case turn.FieldUserPostTradePostEventItem:
		return m.AddedUserPostTradePostEventItem()
	case turn.FieldUserPreTradeMoney:
		return m.AddedUserPreTradeMoney()
	case turn.FieldUserPostTradePreEventMoney:
		return m.AddedUserPostTradePreEventMoney()
	case turn.FieldUserPostTradePostEventMoney:
		return m.AddedUserPostTradePostEventMoney()
	case turn.FieldMarketPreTradeItem:
		return m.AddedMarketPreTradeItem()
	case turn.FieldMarketPostTradePreEventItem:
		return m.AddedMarketPostTradePreEventItem()
	case turn.FieldMarketPostTradePostEventItem:
		return m.AddedMarketPostTradePostEventItem()
	case turn.FieldMarketPreTradeMoney:
		return m.AddedMarketPreTradeMoney()
	case turn.FieldMarketPostTradePreEventMoney:
		return m.AddedMarketPostTradePreEventMoney()
	case turn.FieldMarketPostTradePostEventMoney:
		return m.AddedMarketPostTradePostEventMoney()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TurnMutation) AddField(name string, value ent.Value) error {
	switch name {
	case turn.FieldAmountToGive:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmountToGive(v)
		return nil
	case turn.FieldUserPreTradeItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserPreTradeItem(v)
		return nil
	case turn.FieldUserPostTradePreEventItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserPostTradePreEventItem(v)
		return nil
	case turn.FieldUserPostTradePostEventItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserPostTradePostEventItem(v)
		return nil
	case turn.FieldUserPreTradeMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserPreTradeMoney(v)
		return nil
	case turn.FieldUserPostTradePreEventMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserPostTradePreEventMoney(v)
		return nil
	case turn.FieldUserPostTradePostEventMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserPostTradePostEventMoney(v)
		return nil
	case turn.FieldMarketPreTradeItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMarketPreTradeItem(v)
		return nil
	case turn.FieldMarketPostTradePreEventItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMarketPostTradePreEventItem(v)
		return nil
	case turn.FieldMarketPostTradePostEventItem:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMarketPostTradePostEventItem(v)
		return nil
	case turn.FieldMarketPreTradeMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMarketPreTradeMoney(v)
		return nil
	case turn.FieldMarketPostTradePreEventMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMarketPostTradePreEventMoney(v)
		return nil
	case turn.FieldMarketPostTradePostEventMoney:
		v, ok := value.(schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMarketPostTradePostEventMoney(v)
		return nil
	}
	return fmt.Errorf("unknown Turn numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TurnMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TurnMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TurnMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Turn nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TurnMutation) ResetField(name string) error {
	switch name {
	case turn.FieldUserID:
		m.ResetUserID()
		return nil
	case turn.FieldLocationID:
		m.ResetLocationID()
		return nil
	case turn.FieldItemID:
		m.ResetItemID()
		return nil
	case turn.FieldBuyOrSell:
		m.ResetBuyOrSell()
		return nil
	case turn.FieldAmountToGive:
		m.ResetAmountToGive()
		return nil
	case turn.FieldUserCombatStats:
		m.ResetUserCombatStats()
		return nil
	case turn.FieldDrugLordCombatStats:
		m.ResetDrugLordCombatStats()
		return nil
	case turn.FieldTradeOccurs:
		m.ResetTradeOccurs()
		return nil
	case turn.FieldUserPreTradeItem:
		m.ResetUserPreTradeItem()
		return nil
	case turn.FieldUserPostTradePreEventItem:
		m.ResetUserPostTradePreEventItem()
		return nil
	case turn.FieldUserPostTradePostEventItem:
		m.ResetUserPostTradePostEventItem()
		return nil
	case turn.FieldUserPreTradeMoney:
		m.ResetUserPreTradeMoney()
		return nil
	case turn.FieldUserPostTradePreEventMoney:
		m.ResetUserPostTradePreEventMoney()
		return nil
	case turn.FieldUserPostTradePostEventMoney:
		m.ResetUserPostTradePostEventMoney()
		return nil
	case turn.FieldMarketPreTradeItem:
		m.ResetMarketPreTradeItem()
		return nil
	case turn.FieldMarketPostTradePreEventItem:
		m.ResetMarketPostTradePreEventItem()
		return nil
	case turn.FieldMarketPostTradePostEventItem:
		m.ResetMarketPostTradePostEventItem()
		return nil
	case turn.FieldMarketPreTradeMoney:
		m.ResetMarketPreTradeMoney()
		return nil
	case turn.FieldMarketPostTradePreEventMoney:
		m.ResetMarketPostTradePreEventMoney()
		return nil
	case turn.FieldMarketPostTradePostEventMoney:
		m.ResetMarketPostTradePostEventMoney()
		return nil
	case turn.FieldDealerDash:
		m.ResetDealerDash()
		return nil
	case turn.FieldWrangleDashedDealer:
		m.ResetWrangleDashedDealer()
		return nil
	case turn.FieldMugging:
		m.ResetMugging()
		return nil
	case turn.FieldRunFromMugging:
		m.ResetRunFromMugging()
		return nil
	case turn.FieldGangWar:
		m.ResetGangWar()
		return nil
	case turn.FieldDefendGangWar:
		m.ResetDefendGangWar()
		return nil
	case turn.FieldCopRaid:
		m.ResetCopRaid()
		return nil
	case turn.FieldBribeCops:
		m.ResetBribeCops()
		return nil
	case turn.FieldFindItem:
		m.ResetFindItem()
		return nil
	case turn.FieldLocalShipment:
		m.ResetLocalShipment()
		return nil
	case turn.FieldWarehouseSeizure:
		m.ResetWarehouseSeizure()
		return nil
	case turn.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Turn field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TurnMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TurnMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TurnMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TurnMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TurnMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TurnMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TurnMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Turn unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TurnMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Turn edge %s", name)
}
