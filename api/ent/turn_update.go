// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/RYO/api/ent/predicate"
	"github.com/dopedao/RYO/api/ent/schema"
	"github.com/dopedao/RYO/api/ent/turn"
)

// TurnUpdate is the builder for updating Turn entities.
type TurnUpdate struct {
	config
	hooks    []Hook
	mutation *TurnMutation
}

// Where appends a list predicates to the TurnUpdate builder.
func (tu *TurnUpdate) Where(ps ...predicate.Turn) *TurnUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAmountToGive sets the "amount_to_give" field.
func (tu *TurnUpdate) SetAmountToGive(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetAmountToGive()
	tu.mutation.SetAmountToGive(si)
	return tu
}

// AddAmountToGive adds si to the "amount_to_give" field.
func (tu *TurnUpdate) AddAmountToGive(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddAmountToGive(si)
	return tu
}

// SetUserCombatStats sets the "user_combat_stats" field.
func (tu *TurnUpdate) SetUserCombatStats(i []int) *TurnUpdate {
	tu.mutation.SetUserCombatStats(i)
	return tu
}

// SetDrugLordCombatStats sets the "drug_lord_combat_stats" field.
func (tu *TurnUpdate) SetDrugLordCombatStats(i []int) *TurnUpdate {
	tu.mutation.SetDrugLordCombatStats(i)
	return tu
}

// SetTradeOccurs sets the "trade_occurs" field.
func (tu *TurnUpdate) SetTradeOccurs(b bool) *TurnUpdate {
	tu.mutation.SetTradeOccurs(b)
	return tu
}

// SetUserPreTradeItem sets the "user_pre_trade_item" field.
func (tu *TurnUpdate) SetUserPreTradeItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetUserPreTradeItem()
	tu.mutation.SetUserPreTradeItem(si)
	return tu
}

// AddUserPreTradeItem adds si to the "user_pre_trade_item" field.
func (tu *TurnUpdate) AddUserPreTradeItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddUserPreTradeItem(si)
	return tu
}

// SetUserPostTradePreEventItem sets the "user_post_trade_pre_event_item" field.
func (tu *TurnUpdate) SetUserPostTradePreEventItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetUserPostTradePreEventItem()
	tu.mutation.SetUserPostTradePreEventItem(si)
	return tu
}

// AddUserPostTradePreEventItem adds si to the "user_post_trade_pre_event_item" field.
func (tu *TurnUpdate) AddUserPostTradePreEventItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddUserPostTradePreEventItem(si)
	return tu
}

// SetUserPostTradePostEventItem sets the "user_post_trade_post_event_item" field.
func (tu *TurnUpdate) SetUserPostTradePostEventItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetUserPostTradePostEventItem()
	tu.mutation.SetUserPostTradePostEventItem(si)
	return tu
}

// AddUserPostTradePostEventItem adds si to the "user_post_trade_post_event_item" field.
func (tu *TurnUpdate) AddUserPostTradePostEventItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddUserPostTradePostEventItem(si)
	return tu
}

// SetUserPreTradeMoney sets the "user_pre_trade_money" field.
func (tu *TurnUpdate) SetUserPreTradeMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetUserPreTradeMoney()
	tu.mutation.SetUserPreTradeMoney(si)
	return tu
}

// AddUserPreTradeMoney adds si to the "user_pre_trade_money" field.
func (tu *TurnUpdate) AddUserPreTradeMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddUserPreTradeMoney(si)
	return tu
}

// SetUserPostTradePreEventMoney sets the "user_post_trade_pre_event_money" field.
func (tu *TurnUpdate) SetUserPostTradePreEventMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetUserPostTradePreEventMoney()
	tu.mutation.SetUserPostTradePreEventMoney(si)
	return tu
}

// AddUserPostTradePreEventMoney adds si to the "user_post_trade_pre_event_money" field.
func (tu *TurnUpdate) AddUserPostTradePreEventMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddUserPostTradePreEventMoney(si)
	return tu
}

// SetUserPostTradePostEventMoney sets the "user_post_trade_post_event_money" field.
func (tu *TurnUpdate) SetUserPostTradePostEventMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetUserPostTradePostEventMoney()
	tu.mutation.SetUserPostTradePostEventMoney(si)
	return tu
}

// AddUserPostTradePostEventMoney adds si to the "user_post_trade_post_event_money" field.
func (tu *TurnUpdate) AddUserPostTradePostEventMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddUserPostTradePostEventMoney(si)
	return tu
}

// SetMarketPreTradeItem sets the "market_pre_trade_item" field.
func (tu *TurnUpdate) SetMarketPreTradeItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetMarketPreTradeItem()
	tu.mutation.SetMarketPreTradeItem(si)
	return tu
}

// AddMarketPreTradeItem adds si to the "market_pre_trade_item" field.
func (tu *TurnUpdate) AddMarketPreTradeItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddMarketPreTradeItem(si)
	return tu
}

// SetMarketPostTradePreEventItem sets the "market_post_trade_pre_event_item" field.
func (tu *TurnUpdate) SetMarketPostTradePreEventItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetMarketPostTradePreEventItem()
	tu.mutation.SetMarketPostTradePreEventItem(si)
	return tu
}

// AddMarketPostTradePreEventItem adds si to the "market_post_trade_pre_event_item" field.
func (tu *TurnUpdate) AddMarketPostTradePreEventItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddMarketPostTradePreEventItem(si)
	return tu
}

// SetMarketPostTradePostEventItem sets the "market_post_trade_post_event_item" field.
func (tu *TurnUpdate) SetMarketPostTradePostEventItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetMarketPostTradePostEventItem()
	tu.mutation.SetMarketPostTradePostEventItem(si)
	return tu
}

// AddMarketPostTradePostEventItem adds si to the "market_post_trade_post_event_item" field.
func (tu *TurnUpdate) AddMarketPostTradePostEventItem(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddMarketPostTradePostEventItem(si)
	return tu
}

// SetMarketPreTradeMoney sets the "market_pre_tradeMoney" field.
func (tu *TurnUpdate) SetMarketPreTradeMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetMarketPreTradeMoney()
	tu.mutation.SetMarketPreTradeMoney(si)
	return tu
}

// AddMarketPreTradeMoney adds si to the "market_pre_tradeMoney" field.
func (tu *TurnUpdate) AddMarketPreTradeMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddMarketPreTradeMoney(si)
	return tu
}

// SetMarketPostTradePreEventMoney sets the "market_post_trade_pre_eventMoney" field.
func (tu *TurnUpdate) SetMarketPostTradePreEventMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetMarketPostTradePreEventMoney()
	tu.mutation.SetMarketPostTradePreEventMoney(si)
	return tu
}

// AddMarketPostTradePreEventMoney adds si to the "market_post_trade_pre_eventMoney" field.
func (tu *TurnUpdate) AddMarketPostTradePreEventMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddMarketPostTradePreEventMoney(si)
	return tu
}

// SetMarketPostTradePostEventMoney sets the "market_post_trade_post_eventMoney" field.
func (tu *TurnUpdate) SetMarketPostTradePostEventMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.ResetMarketPostTradePostEventMoney()
	tu.mutation.SetMarketPostTradePostEventMoney(si)
	return tu
}

// AddMarketPostTradePostEventMoney adds si to the "market_post_trade_post_eventMoney" field.
func (tu *TurnUpdate) AddMarketPostTradePostEventMoney(si schema.BigInt) *TurnUpdate {
	tu.mutation.AddMarketPostTradePostEventMoney(si)
	return tu
}

// SetDealerDash sets the "dealer_dash" field.
func (tu *TurnUpdate) SetDealerDash(b bool) *TurnUpdate {
	tu.mutation.SetDealerDash(b)
	return tu
}

// SetWrangleDashedDealer sets the "wrangle_dashed_dealer" field.
func (tu *TurnUpdate) SetWrangleDashedDealer(b bool) *TurnUpdate {
	tu.mutation.SetWrangleDashedDealer(b)
	return tu
}

// SetMugging sets the "mugging" field.
func (tu *TurnUpdate) SetMugging(b bool) *TurnUpdate {
	tu.mutation.SetMugging(b)
	return tu
}

// SetRunFromMugging sets the "run_from_mugging" field.
func (tu *TurnUpdate) SetRunFromMugging(b bool) *TurnUpdate {
	tu.mutation.SetRunFromMugging(b)
	return tu
}

// SetGangWar sets the "gang_war" field.
func (tu *TurnUpdate) SetGangWar(b bool) *TurnUpdate {
	tu.mutation.SetGangWar(b)
	return tu
}

// SetDefendGangWar sets the "defend_gang_war" field.
func (tu *TurnUpdate) SetDefendGangWar(b bool) *TurnUpdate {
	tu.mutation.SetDefendGangWar(b)
	return tu
}

// SetCopRaid sets the "cop_raid" field.
func (tu *TurnUpdate) SetCopRaid(b bool) *TurnUpdate {
	tu.mutation.SetCopRaid(b)
	return tu
}

// SetBribeCops sets the "bribe_cops" field.
func (tu *TurnUpdate) SetBribeCops(b bool) *TurnUpdate {
	tu.mutation.SetBribeCops(b)
	return tu
}

// SetFindItem sets the "find_item" field.
func (tu *TurnUpdate) SetFindItem(b bool) *TurnUpdate {
	tu.mutation.SetFindItem(b)
	return tu
}

// SetLocalShipment sets the "local_shipment" field.
func (tu *TurnUpdate) SetLocalShipment(b bool) *TurnUpdate {
	tu.mutation.SetLocalShipment(b)
	return tu
}

// SetWarehouseSeizure sets the "warehouse_seizure" field.
func (tu *TurnUpdate) SetWarehouseSeizure(b bool) *TurnUpdate {
	tu.mutation.SetWarehouseSeizure(b)
	return tu
}

// Mutation returns the TurnMutation object of the builder.
func (tu *TurnUpdate) Mutation() *TurnMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TurnUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TurnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TurnUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TurnUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TurnUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TurnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   turn.Table,
			Columns: turn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: turn.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.AmountToGive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldAmountToGive,
		})
	}
	if value, ok := tu.mutation.AddedAmountToGive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldAmountToGive,
		})
	}
	if value, ok := tu.mutation.UserCombatStats(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: turn.FieldUserCombatStats,
		})
	}
	if value, ok := tu.mutation.DrugLordCombatStats(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: turn.FieldDrugLordCombatStats,
		})
	}
	if value, ok := tu.mutation.TradeOccurs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldTradeOccurs,
		})
	}
	if value, ok := tu.mutation.UserPreTradeItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPreTradeItem,
		})
	}
	if value, ok := tu.mutation.AddedUserPreTradeItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPreTradeItem,
		})
	}
	if value, ok := tu.mutation.UserPostTradePreEventItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePreEventItem,
		})
	}
	if value, ok := tu.mutation.AddedUserPostTradePreEventItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePreEventItem,
		})
	}
	if value, ok := tu.mutation.UserPostTradePostEventItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePostEventItem,
		})
	}
	if value, ok := tu.mutation.AddedUserPostTradePostEventItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePostEventItem,
		})
	}
	if value, ok := tu.mutation.UserPreTradeMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPreTradeMoney,
		})
	}
	if value, ok := tu.mutation.AddedUserPreTradeMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPreTradeMoney,
		})
	}
	if value, ok := tu.mutation.UserPostTradePreEventMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePreEventMoney,
		})
	}
	if value, ok := tu.mutation.AddedUserPostTradePreEventMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePreEventMoney,
		})
	}
	if value, ok := tu.mutation.UserPostTradePostEventMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePostEventMoney,
		})
	}
	if value, ok := tu.mutation.AddedUserPostTradePostEventMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePostEventMoney,
		})
	}
	if value, ok := tu.mutation.MarketPreTradeItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPreTradeItem,
		})
	}
	if value, ok := tu.mutation.AddedMarketPreTradeItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPreTradeItem,
		})
	}
	if value, ok := tu.mutation.MarketPostTradePreEventItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePreEventItem,
		})
	}
	if value, ok := tu.mutation.AddedMarketPostTradePreEventItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePreEventItem,
		})
	}
	if value, ok := tu.mutation.MarketPostTradePostEventItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePostEventItem,
		})
	}
	if value, ok := tu.mutation.AddedMarketPostTradePostEventItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePostEventItem,
		})
	}
	if value, ok := tu.mutation.MarketPreTradeMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPreTradeMoney,
		})
	}
	if value, ok := tu.mutation.AddedMarketPreTradeMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPreTradeMoney,
		})
	}
	if value, ok := tu.mutation.MarketPostTradePreEventMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePreEventMoney,
		})
	}
	if value, ok := tu.mutation.AddedMarketPostTradePreEventMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePreEventMoney,
		})
	}
	if value, ok := tu.mutation.MarketPostTradePostEventMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePostEventMoney,
		})
	}
	if value, ok := tu.mutation.AddedMarketPostTradePostEventMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePostEventMoney,
		})
	}
	if value, ok := tu.mutation.DealerDash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldDealerDash,
		})
	}
	if value, ok := tu.mutation.WrangleDashedDealer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldWrangleDashedDealer,
		})
	}
	if value, ok := tu.mutation.Mugging(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldMugging,
		})
	}
	if value, ok := tu.mutation.RunFromMugging(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldRunFromMugging,
		})
	}
	if value, ok := tu.mutation.GangWar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldGangWar,
		})
	}
	if value, ok := tu.mutation.DefendGangWar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldDefendGangWar,
		})
	}
	if value, ok := tu.mutation.CopRaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldCopRaid,
		})
	}
	if value, ok := tu.mutation.BribeCops(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldBribeCops,
		})
	}
	if value, ok := tu.mutation.FindItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldFindItem,
		})
	}
	if value, ok := tu.mutation.LocalShipment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldLocalShipment,
		})
	}
	if value, ok := tu.mutation.WarehouseSeizure(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldWarehouseSeizure,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{turn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TurnUpdateOne is the builder for updating a single Turn entity.
type TurnUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TurnMutation
}

// SetAmountToGive sets the "amount_to_give" field.
func (tuo *TurnUpdateOne) SetAmountToGive(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetAmountToGive()
	tuo.mutation.SetAmountToGive(si)
	return tuo
}

// AddAmountToGive adds si to the "amount_to_give" field.
func (tuo *TurnUpdateOne) AddAmountToGive(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddAmountToGive(si)
	return tuo
}

// SetUserCombatStats sets the "user_combat_stats" field.
func (tuo *TurnUpdateOne) SetUserCombatStats(i []int) *TurnUpdateOne {
	tuo.mutation.SetUserCombatStats(i)
	return tuo
}

// SetDrugLordCombatStats sets the "drug_lord_combat_stats" field.
func (tuo *TurnUpdateOne) SetDrugLordCombatStats(i []int) *TurnUpdateOne {
	tuo.mutation.SetDrugLordCombatStats(i)
	return tuo
}

// SetTradeOccurs sets the "trade_occurs" field.
func (tuo *TurnUpdateOne) SetTradeOccurs(b bool) *TurnUpdateOne {
	tuo.mutation.SetTradeOccurs(b)
	return tuo
}

// SetUserPreTradeItem sets the "user_pre_trade_item" field.
func (tuo *TurnUpdateOne) SetUserPreTradeItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetUserPreTradeItem()
	tuo.mutation.SetUserPreTradeItem(si)
	return tuo
}

// AddUserPreTradeItem adds si to the "user_pre_trade_item" field.
func (tuo *TurnUpdateOne) AddUserPreTradeItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddUserPreTradeItem(si)
	return tuo
}

// SetUserPostTradePreEventItem sets the "user_post_trade_pre_event_item" field.
func (tuo *TurnUpdateOne) SetUserPostTradePreEventItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetUserPostTradePreEventItem()
	tuo.mutation.SetUserPostTradePreEventItem(si)
	return tuo
}

// AddUserPostTradePreEventItem adds si to the "user_post_trade_pre_event_item" field.
func (tuo *TurnUpdateOne) AddUserPostTradePreEventItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddUserPostTradePreEventItem(si)
	return tuo
}

// SetUserPostTradePostEventItem sets the "user_post_trade_post_event_item" field.
func (tuo *TurnUpdateOne) SetUserPostTradePostEventItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetUserPostTradePostEventItem()
	tuo.mutation.SetUserPostTradePostEventItem(si)
	return tuo
}

// AddUserPostTradePostEventItem adds si to the "user_post_trade_post_event_item" field.
func (tuo *TurnUpdateOne) AddUserPostTradePostEventItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddUserPostTradePostEventItem(si)
	return tuo
}

// SetUserPreTradeMoney sets the "user_pre_trade_money" field.
func (tuo *TurnUpdateOne) SetUserPreTradeMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetUserPreTradeMoney()
	tuo.mutation.SetUserPreTradeMoney(si)
	return tuo
}

// AddUserPreTradeMoney adds si to the "user_pre_trade_money" field.
func (tuo *TurnUpdateOne) AddUserPreTradeMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddUserPreTradeMoney(si)
	return tuo
}

// SetUserPostTradePreEventMoney sets the "user_post_trade_pre_event_money" field.
func (tuo *TurnUpdateOne) SetUserPostTradePreEventMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetUserPostTradePreEventMoney()
	tuo.mutation.SetUserPostTradePreEventMoney(si)
	return tuo
}

// AddUserPostTradePreEventMoney adds si to the "user_post_trade_pre_event_money" field.
func (tuo *TurnUpdateOne) AddUserPostTradePreEventMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddUserPostTradePreEventMoney(si)
	return tuo
}

// SetUserPostTradePostEventMoney sets the "user_post_trade_post_event_money" field.
func (tuo *TurnUpdateOne) SetUserPostTradePostEventMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetUserPostTradePostEventMoney()
	tuo.mutation.SetUserPostTradePostEventMoney(si)
	return tuo
}

// AddUserPostTradePostEventMoney adds si to the "user_post_trade_post_event_money" field.
func (tuo *TurnUpdateOne) AddUserPostTradePostEventMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddUserPostTradePostEventMoney(si)
	return tuo
}

// SetMarketPreTradeItem sets the "market_pre_trade_item" field.
func (tuo *TurnUpdateOne) SetMarketPreTradeItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetMarketPreTradeItem()
	tuo.mutation.SetMarketPreTradeItem(si)
	return tuo
}

// AddMarketPreTradeItem adds si to the "market_pre_trade_item" field.
func (tuo *TurnUpdateOne) AddMarketPreTradeItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddMarketPreTradeItem(si)
	return tuo
}

// SetMarketPostTradePreEventItem sets the "market_post_trade_pre_event_item" field.
func (tuo *TurnUpdateOne) SetMarketPostTradePreEventItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetMarketPostTradePreEventItem()
	tuo.mutation.SetMarketPostTradePreEventItem(si)
	return tuo
}

// AddMarketPostTradePreEventItem adds si to the "market_post_trade_pre_event_item" field.
func (tuo *TurnUpdateOne) AddMarketPostTradePreEventItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddMarketPostTradePreEventItem(si)
	return tuo
}

// SetMarketPostTradePostEventItem sets the "market_post_trade_post_event_item" field.
func (tuo *TurnUpdateOne) SetMarketPostTradePostEventItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetMarketPostTradePostEventItem()
	tuo.mutation.SetMarketPostTradePostEventItem(si)
	return tuo
}

// AddMarketPostTradePostEventItem adds si to the "market_post_trade_post_event_item" field.
func (tuo *TurnUpdateOne) AddMarketPostTradePostEventItem(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddMarketPostTradePostEventItem(si)
	return tuo
}

// SetMarketPreTradeMoney sets the "market_pre_tradeMoney" field.
func (tuo *TurnUpdateOne) SetMarketPreTradeMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetMarketPreTradeMoney()
	tuo.mutation.SetMarketPreTradeMoney(si)
	return tuo
}

// AddMarketPreTradeMoney adds si to the "market_pre_tradeMoney" field.
func (tuo *TurnUpdateOne) AddMarketPreTradeMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddMarketPreTradeMoney(si)
	return tuo
}

// SetMarketPostTradePreEventMoney sets the "market_post_trade_pre_eventMoney" field.
func (tuo *TurnUpdateOne) SetMarketPostTradePreEventMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetMarketPostTradePreEventMoney()
	tuo.mutation.SetMarketPostTradePreEventMoney(si)
	return tuo
}

// AddMarketPostTradePreEventMoney adds si to the "market_post_trade_pre_eventMoney" field.
func (tuo *TurnUpdateOne) AddMarketPostTradePreEventMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddMarketPostTradePreEventMoney(si)
	return tuo
}

// SetMarketPostTradePostEventMoney sets the "market_post_trade_post_eventMoney" field.
func (tuo *TurnUpdateOne) SetMarketPostTradePostEventMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.ResetMarketPostTradePostEventMoney()
	tuo.mutation.SetMarketPostTradePostEventMoney(si)
	return tuo
}

// AddMarketPostTradePostEventMoney adds si to the "market_post_trade_post_eventMoney" field.
func (tuo *TurnUpdateOne) AddMarketPostTradePostEventMoney(si schema.BigInt) *TurnUpdateOne {
	tuo.mutation.AddMarketPostTradePostEventMoney(si)
	return tuo
}

// SetDealerDash sets the "dealer_dash" field.
func (tuo *TurnUpdateOne) SetDealerDash(b bool) *TurnUpdateOne {
	tuo.mutation.SetDealerDash(b)
	return tuo
}

// SetWrangleDashedDealer sets the "wrangle_dashed_dealer" field.
func (tuo *TurnUpdateOne) SetWrangleDashedDealer(b bool) *TurnUpdateOne {
	tuo.mutation.SetWrangleDashedDealer(b)
	return tuo
}

// SetMugging sets the "mugging" field.
func (tuo *TurnUpdateOne) SetMugging(b bool) *TurnUpdateOne {
	tuo.mutation.SetMugging(b)
	return tuo
}

// SetRunFromMugging sets the "run_from_mugging" field.
func (tuo *TurnUpdateOne) SetRunFromMugging(b bool) *TurnUpdateOne {
	tuo.mutation.SetRunFromMugging(b)
	return tuo
}

// SetGangWar sets the "gang_war" field.
func (tuo *TurnUpdateOne) SetGangWar(b bool) *TurnUpdateOne {
	tuo.mutation.SetGangWar(b)
	return tuo
}

// SetDefendGangWar sets the "defend_gang_war" field.
func (tuo *TurnUpdateOne) SetDefendGangWar(b bool) *TurnUpdateOne {
	tuo.mutation.SetDefendGangWar(b)
	return tuo
}

// SetCopRaid sets the "cop_raid" field.
func (tuo *TurnUpdateOne) SetCopRaid(b bool) *TurnUpdateOne {
	tuo.mutation.SetCopRaid(b)
	return tuo
}

// SetBribeCops sets the "bribe_cops" field.
func (tuo *TurnUpdateOne) SetBribeCops(b bool) *TurnUpdateOne {
	tuo.mutation.SetBribeCops(b)
	return tuo
}

// SetFindItem sets the "find_item" field.
func (tuo *TurnUpdateOne) SetFindItem(b bool) *TurnUpdateOne {
	tuo.mutation.SetFindItem(b)
	return tuo
}

// SetLocalShipment sets the "local_shipment" field.
func (tuo *TurnUpdateOne) SetLocalShipment(b bool) *TurnUpdateOne {
	tuo.mutation.SetLocalShipment(b)
	return tuo
}

// SetWarehouseSeizure sets the "warehouse_seizure" field.
func (tuo *TurnUpdateOne) SetWarehouseSeizure(b bool) *TurnUpdateOne {
	tuo.mutation.SetWarehouseSeizure(b)
	return tuo
}

// Mutation returns the TurnMutation object of the builder.
func (tuo *TurnUpdateOne) Mutation() *TurnMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TurnUpdateOne) Select(field string, fields ...string) *TurnUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Turn entity.
func (tuo *TurnUpdateOne) Save(ctx context.Context) (*Turn, error) {
	var (
		err  error
		node *Turn
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TurnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TurnUpdateOne) SaveX(ctx context.Context) *Turn {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TurnUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TurnUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TurnUpdateOne) sqlSave(ctx context.Context) (_node *Turn, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   turn.Table,
			Columns: turn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: turn.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Turn.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, turn.FieldID)
		for _, f := range fields {
			if !turn.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != turn.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.AmountToGive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldAmountToGive,
		})
	}
	if value, ok := tuo.mutation.AddedAmountToGive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldAmountToGive,
		})
	}
	if value, ok := tuo.mutation.UserCombatStats(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: turn.FieldUserCombatStats,
		})
	}
	if value, ok := tuo.mutation.DrugLordCombatStats(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: turn.FieldDrugLordCombatStats,
		})
	}
	if value, ok := tuo.mutation.TradeOccurs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldTradeOccurs,
		})
	}
	if value, ok := tuo.mutation.UserPreTradeItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPreTradeItem,
		})
	}
	if value, ok := tuo.mutation.AddedUserPreTradeItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPreTradeItem,
		})
	}
	if value, ok := tuo.mutation.UserPostTradePreEventItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePreEventItem,
		})
	}
	if value, ok := tuo.mutation.AddedUserPostTradePreEventItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePreEventItem,
		})
	}
	if value, ok := tuo.mutation.UserPostTradePostEventItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePostEventItem,
		})
	}
	if value, ok := tuo.mutation.AddedUserPostTradePostEventItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePostEventItem,
		})
	}
	if value, ok := tuo.mutation.UserPreTradeMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPreTradeMoney,
		})
	}
	if value, ok := tuo.mutation.AddedUserPreTradeMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPreTradeMoney,
		})
	}
	if value, ok := tuo.mutation.UserPostTradePreEventMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePreEventMoney,
		})
	}
	if value, ok := tuo.mutation.AddedUserPostTradePreEventMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePreEventMoney,
		})
	}
	if value, ok := tuo.mutation.UserPostTradePostEventMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePostEventMoney,
		})
	}
	if value, ok := tuo.mutation.AddedUserPostTradePostEventMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldUserPostTradePostEventMoney,
		})
	}
	if value, ok := tuo.mutation.MarketPreTradeItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPreTradeItem,
		})
	}
	if value, ok := tuo.mutation.AddedMarketPreTradeItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPreTradeItem,
		})
	}
	if value, ok := tuo.mutation.MarketPostTradePreEventItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePreEventItem,
		})
	}
	if value, ok := tuo.mutation.AddedMarketPostTradePreEventItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePreEventItem,
		})
	}
	if value, ok := tuo.mutation.MarketPostTradePostEventItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePostEventItem,
		})
	}
	if value, ok := tuo.mutation.AddedMarketPostTradePostEventItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePostEventItem,
		})
	}
	if value, ok := tuo.mutation.MarketPreTradeMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPreTradeMoney,
		})
	}
	if value, ok := tuo.mutation.AddedMarketPreTradeMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPreTradeMoney,
		})
	}
	if value, ok := tuo.mutation.MarketPostTradePreEventMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePreEventMoney,
		})
	}
	if value, ok := tuo.mutation.AddedMarketPostTradePreEventMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePreEventMoney,
		})
	}
	if value, ok := tuo.mutation.MarketPostTradePostEventMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePostEventMoney,
		})
	}
	if value, ok := tuo.mutation.AddedMarketPostTradePostEventMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: turn.FieldMarketPostTradePostEventMoney,
		})
	}
	if value, ok := tuo.mutation.DealerDash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldDealerDash,
		})
	}
	if value, ok := tuo.mutation.WrangleDashedDealer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldWrangleDashedDealer,
		})
	}
	if value, ok := tuo.mutation.Mugging(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldMugging,
		})
	}
	if value, ok := tuo.mutation.RunFromMugging(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldRunFromMugging,
		})
	}
	if value, ok := tuo.mutation.GangWar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldGangWar,
		})
	}
	if value, ok := tuo.mutation.DefendGangWar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldDefendGangWar,
		})
	}
	if value, ok := tuo.mutation.CopRaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldCopRaid,
		})
	}
	if value, ok := tuo.mutation.BribeCops(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldBribeCops,
		})
	}
	if value, ok := tuo.mutation.FindItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldFindItem,
		})
	}
	if value, ok := tuo.mutation.LocalShipment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldLocalShipment,
		})
	}
	if value, ok := tuo.mutation.WarehouseSeizure(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: turn.FieldWarehouseSeizure,
		})
	}
	_node = &Turn{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{turn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
