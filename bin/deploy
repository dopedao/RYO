#!/bin/bash
set -eu

###########################################
#               Network                   #
###########################################

# For a network_type=localhost node open a new shell and run:
# `nile node`

#network_type=localhost
network_type=goerli
# network_type=mainnet

# Flow:
## The Controller is the only unchangeable contract.
## First deploy Arbiter.
## Then send the Arbiter address during Controller deployment.
## Then deploy Controller address during module deployments.

# Removes `alpha-` from `alpha-goerli`, to use for deployments.txt.
network () {
    if [[ "$1" == "alpha-goerli" ]]
    then
        echo "goerli"
    else
        echo $1
    fi
}

# Wipe old deployment record if it exists.
rm $(network $network_type).deployments.txt || echo 'Will create one...'

# Searches for a keyword, then fetches the address from that line.
get_address () {
    echo $(grep $1 $(network $network_type).deployments.txt | \
        grep -o -m 1 '\b0x\w*')
}

# Public keys of wallets (dummy/placeholder)
declare -i AdminPubKey=12345678987654321
declare -i User00PubKey=456456456

# Admin account contract
AdminAccount=$(nile deploy Account $AdminPubKey \
    --alias AdminAccount --network $network_type)

# Arbiter contract (controlled by Admin)
Arbiter=$(nile deploy Arbiter $(get_address "AdminAccount") \
    --alias Arbiter --network $network_type)

# Module controller contract (controlled by Arbiter)
ModuleController=$(nile deploy ModuleController $(get_address "Arbiter") \
    --alias ModuleController --network $network_type)

# Save address of controller into the arbiter
echo "invoking contract:" $(get_address "Arbiter")
nile invoke Arbiter set_address_of_controller \
    $(get_address "ModuleController") --network $network_type

# TODO: Read the returned tx hash from the 'invoke' operation
# pass it to read the status (json). E.g., require that the status is
# ok, and print the status message to the console.

# If on localhost mode, check the transaction status as follows:
# starknet tx_status --hash TX_HASH --feeder_gateway_url http://localhost:5000/

# If on public testnet:
# starknet tx_status --hash TX_HASH

# Goerli Tx failed. Hash: 0x77cc8ff0af3fc65532577e17e420d2db9fda60bf7e4cf11ddf0286aa9d51aa5

# The admin account will control the Arbiter
# and will be deployed with STARK-friendly ECDSA keypair(s). The
# key(s) will then be used to sign messages that go to the Account.
# The Account checks the signature(s) then passes the transaction data
# to the Arbiter. The Arbiter may then do things like call the
# ModuleController with information about a new module address.

###########################################
#                Modules                  #
###########################################
# The constructor of each module is passed the address of the controller.
deploy_module () {
    nile deploy $1 $(get_address "ModuleController") \
        --alias $1 --network $network_type
}

# Deploy each module.
deploy_module "01_DopeWars"
deploy_module "02_LocationOwned"
deploy_module "03_UserOwned"
deploy_module "04_UserRegistry"
deploy_module "05_Combat"
deploy_module "06_DrugLord"
deploy_module "07_PseudoRandom"

# Use the Arbiter to save module addresses into the ModuleController.
echo "invoking contract:" $(get_address "ModuleController")
nile invoke ModuleController set_initial_module_addresses \
    $(get_address "1_DopeWars") \
    $(get_address "2_LocationOwned") \
    $(get_address "3_UserOwned") \
    $(get_address "4_UserRegistry") \
    $(get_address "5_Combat") \
    $(get_address "6_DrugLord") \
    $(get_address "7_PseudoRandom") \
    --network $network_type

###########################################
#                Player(s)                #
###########################################
nile deploy Account $User00PubKey \
    --alias User00Account --network $network_type

