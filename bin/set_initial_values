#!/bin/bash
set -eu

# Save the deployed contract addresses from bin/deploy.
set_market_addr=$(starknet invoke \
    --network=alpha \
    --address $GameEngineV1Address \
    --abi artifacts/abi/GameEngineV1_abi.json \
    --function set_market_maker_address \
    --inputs ${MarketMakerAddress})
echo -e "\nMarket address set: \n${set_market_addr}"

set_registry_addr=$(starknet invoke \
    --network=alpha \
    --address $GameEngineV1Address \
    --abi artifacts/abi/GameEngineV1_abi.json \
    --function set_user_registry_address \
    --inputs ${UserRegistryAddress})
echo -e "\nRegistry address set: \n${set_registry_addr}"

set_combat_addr=$(starknet invoke \
    --network=alpha \
    --address $GameEngineV1Address \
    --abi artifacts/abi/GameEngineV1_abi.json \
    --function set_combat_address \
    --inputs ${CombatAddress})
echo -e "\nCombat address set: \n${set_combat_addr}"


# Set up initial values for every market curve. Pass two lists,
# one for market item quantities, the other for market money quantities,
# Ordred first by location_id, then by item_id.

# First, collect the market values from the `mappings/` directory.
# This script saves them to environment variables `$market_items` and
# `$market_money` in a format that the StarkNet CLI will use.

# Collect the market values from mappings/xyz.csv using
# using the python helper utility.

# If needed the markets can be exported directly with:
# . ./testing/utils/export_markets

market_money="${python3 ./testing/utils/markets_to_list.py 0}"
market_items="${python3 ./testing/utils/markets_to_list.py 1}"

# Use the deployed address from previously run bin/deploy
# and pass the deployed contract the list of starting values.

# TODO Get this to accept the list of initial values.
#echo $(starknet invoke \
#    --network=alpha \
#    --address ${GameEngineV1Address} \
#    --abi artifacts/abi/GameEngineV1_abi.json \
#    --function admin_set_pairs \
#    --inputs 1444 ${market_items} 1444 ${market_money})


